/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/css/agroforestgrid.css":
/*!************************************!*\
  !*** ./src/css/agroforestgrid.css ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n\n\n//# sourceURL=webpack://agroforestgrid/./src/css/agroforestgrid.css?");

/***/ }),

/***/ "./src/components/exportImportDialog.js":
/*!**********************************************!*\
  !*** ./src/components/exportImportDialog.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ExportImportDialog: () => (/* binding */ ExportImportDialog)\n/* harmony export */ });\n/* harmony import */ var _settings_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../settings.js */ \"./src/settings.js\");\n/* harmony import */ var _js_dataExport_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../js/dataExport.js */ \"./src/js/dataExport.js\");\n/* harmony import */ var _js_dataAccessContext_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../js/dataAccessContext.js */ \"./src/js/dataAccessContext.js\");\n\r\n\r\n\r\n\r\nconst template = document.createElement('template');\r\ntemplate.innerHTML = `\r\n    <style>\r\n        #import-project-drop-zone {\r\n            width: 20em;\r\n            height: 4.6em;\r\n            border: 2px dashed #888;\r\n            background-color: #eee;\r\n            padding: 1em 2em;\r\n            margin: 1em auto;\r\n        }\r\n        #import-project-drop-zone p {\r\n            color: #999;\r\n            font-weight: bold;\r\n            text-align: center;\r\n        }\r\n        #import-project-drop-zone:hover {\r\n            border-width: 3px;\r\n        }\r\n    </style>\r\n    <dialog id=\"dialog-export-import\">\r\n        <div id=\"dialog-close-x\" class=\"dialog-close-x\">&#10005</div>\r\n        <h3><slot name=\"dialog-title\">Export / Import</slot></h3>\r\n        <div class=\"dialog-button-container\">\r\n            <button id=\"export-project-button\" class=\"dialog-button\">Export the current project</button>\r\n        </div>\r\n        <div style=\"max-width: 40em;\">\r\n            <div id=\"import-project-drop-zone\">\r\n                <p>To import a project, drag &amp; drop a previously exported project file here...</p>\r\n            </div>\r\n        </div>\r\n        <div class=\"dialog-button-container\">\r\n            <button id=\"dialog-button-close\" class=\"dialog-button-secondary\">Close</button>\r\n        </div>\r\n    </dialog>\r\n`;\r\n\r\nclass ExportImportDialog extends HTMLElement {\r\n\r\n    static dialog = null;\r\n\r\n    #exportButton = null;\r\n    #importDropZone = null;\r\n    #closeX = null;\r\n    #closeButton = null;\r\n    #currentProjectKey = null;\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    connectedCallback() {\r\n        const shadow = this.attachShadow({ mode: 'open' });\r\n        shadow.appendChild(template.content.cloneNode(true));\r\n\r\n        // get data-stylesheet variable\r\n        const projectStylesheet = this.getAttribute('data-stylesheet');\r\n\r\n        // Add project stylesheets to the shadow dom\r\n        const projectStyles = document.createElement(\"link\");\r\n        projectStyles.setAttribute(\"rel\", \"stylesheet\");\r\n        projectStyles.setAttribute(\"href\", projectStylesheet);\r\n        shadow.appendChild(projectStyles);\r\n\r\n        this.dialog = this.shadowRoot.querySelector('#dialog-export-import');\r\n\r\n        this.#exportButton = this.shadowRoot.querySelector('#export-project-button');\r\n        this.#importDropZone = this.shadowRoot.querySelector('#import-project-drop-zone');\r\n        this.#closeX = this.shadowRoot.querySelector('#dialog-close-x');\r\n        this.#closeButton = this.shadowRoot.querySelector('#dialog-button-close');\r\n\r\n        this.#setupEventHandlers();\r\n    }\r\n\r\n    #setupEventHandlers = () => {\r\n        this.#exportButton.addEventListener(\"click\", (e) => {\r\n            _js_dataExport_js__WEBPACK_IMPORTED_MODULE_1__.downloadProject(this.#currentProjectKey);\r\n        });\r\n\r\n        this.#importDropZone.addEventListener(\"dragover\", (e) => {\r\n            e.preventDefault();\r\n        });\r\n        this.#importDropZone.addEventListener(\"drop\", (e) => { \r\n            e.preventDefault();            \r\n            this.#projectImportFile(e);\r\n        });\r\n\r\n        this.#closeX.addEventListener(\"click\", (e) => {\r\n            this.dialog.close();\r\n        });\r\n        this.#closeButton.addEventListener(\"click\", (e) => {\r\n            this.dialog.close();\r\n        });\r\n    };\r\n    \r\n    #projectImportFile = (e) => {\r\n        const dataAccess = _js_dataAccessContext_js__WEBPACK_IMPORTED_MODULE_2__.create(_settings_js__WEBPACK_IMPORTED_MODULE_0__.dataStoreType);\r\n\r\n        const droppedFile = e.dataTransfer.files[0];\r\n        if (!['.json'].some(ext => droppedFile.name.endsWith(ext))) {     \r\n            alert(\"Oops, it must be a .json file! Please ensure it is a JSON file.\");\r\n            return;\r\n        }\r\n\r\n        if (confirm(`If this project already exists, it will be overwritten with the imported project. Confirm that you want to import the ${droppedFile.name} file?`) == false) {\r\n            return;\r\n        }\r\n\r\n        const reader = new FileReader();\r\n        reader.onload = (e) => {\r\n            var data = JSON.parse(e.target.result);\r\n            var project = data.project;\r\n            var projectKey = project.projectKey;\r\n\r\n            // Save the project\r\n            dataAccess.projectUpdate(project);               \r\n            window.dispatchEvent(new CustomEvent('project-changed', { detail: { projectKey: projectKey } }));    \r\n\r\n            this.dialog.close();\r\n        };\r\n        reader.readAsText(droppedFile);\r\n    }\r\n\r\n    showModal = (projectKey) => {\r\n        this.#currentProjectKey = projectKey;\r\n        this.dialog.showModal();\r\n        this.#closeButton.focus();\r\n    }\r\n}\r\n\r\ncustomElements.define('export-import-dialog', ExportImportDialog);\n\n//# sourceURL=webpack://agroforestgrid/./src/components/exportImportDialog.js?");

/***/ }),

/***/ "./src/components/iconButton.js":
/*!**************************************!*\
  !*** ./src/components/iconButton.js ***!
  \**************************************/
/***/ (() => {

eval("\r\nclass IconButton extends HTMLElement {\r\n\r\n    constructor() {\r\n        super();\r\n        this.render();\r\n    }\r\n\r\n    render = () => {\r\n        const template = document.createElement('template');\r\n        template.innerHTML = `\r\n            <style>\r\n                :host { \r\n                    display: inline-block;\r\n                    margin: 0 0.3em;\r\n                }\r\n                button {\r\n                    background-color: transparent;\r\n                    border: none;\r\n                    margin: 0;\r\n                    padding: 0;\r\n                    text-align: inherit;\r\n                    font: inherit;\r\n                    border-radius: 0;\r\n                    cursor: pointer;\r\n                }\r\n            </style>\r\n            <button>\r\n                <svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\">\r\n                    <g fill=\"${this.fill}\" stroke=\"${this.strokeColour}\" stroke-width=\"${this.strokeWidth}\">\r\n                        <path d=\"${this.iconPath}\" />\r\n                    </g>\r\n                </svg>\r\n            </button>\r\n        `;\r\n\r\n        const shadow = this.attachShadow({ mode: 'open' });\r\n        shadow.appendChild(template.content.cloneNode(true));\r\n    }    \r\n\r\n    get iconPath() {\r\n        return this.getAttribute('icon-svg-path') || '';\r\n    }\r\n    get fill() {\r\n        return this.getAttribute('fill') || 'none';\r\n    }\r\n    get strokeWidth() {\r\n        return this.getAttribute('stroke-width') || '2';\r\n    }\r\n    get strokeColour() {\r\n        return this.getAttribute('stroke-colour') || '#eee';\r\n    }\r\n}\r\n\r\ncustomElements.define('icon-button', IconButton);\n\n//# sourceURL=webpack://agroforestgrid/./src/components/iconButton.js?");

/***/ }),

/***/ "./src/components/informationDialog.js":
/*!*********************************************!*\
  !*** ./src/components/informationDialog.js ***!
  \*********************************************/
/***/ (() => {

eval("\r\nconst template = document.createElement('template');\r\ntemplate.innerHTML = `\r\n    <dialog id=\"dialog-information\">\r\n        <div id=\"dialog-close-x\" class=\"dialog-close-x\">&#10005</div>\r\n        <h3><slot name=\"dialog-title\">Information</slot></h3>\r\n        <slot name=\"dialog-content\"></slot>\r\n        <div class=\"dialog-button-container\">\r\n            <button id=\"dialog-button-close\" class=\"dialog-button\">Close</button>\r\n        </div>\r\n    </dialog>\r\n`;\r\n\r\nclass InformationDialog extends HTMLElement {\r\n\r\n    static dialog = null;\r\n    #closeX = null;\r\n    #closeButton = null;\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    connectedCallback() {\r\n        const shadow = this.attachShadow({ mode: 'open' });\r\n        shadow.appendChild(template.content.cloneNode(true));\r\n\r\n        // get data-stylesheet variable\r\n        const projectStylesheet = this.getAttribute('data-stylesheet');\r\n\r\n        // Add project stylesheets to the shadow dom\r\n        const projectStyles = document.createElement(\"link\");\r\n        projectStyles.setAttribute(\"rel\", \"stylesheet\");\r\n        projectStyles.setAttribute(\"href\", projectStylesheet);\r\n        shadow.appendChild(projectStyles);\r\n\r\n        this.dialog = this.shadowRoot.querySelector('#dialog-information');\r\n        this.#closeX = this.shadowRoot.querySelector('#dialog-close-x');\r\n        this.#closeButton = this.shadowRoot.querySelector('#dialog-button-close');\r\n\r\n        this.#setupEventHandlers();\r\n    }\r\n\r\n    #setupEventHandlers = () => {\r\n        this.#closeX.addEventListener(\"click\", (e) => {\r\n            this.dialog.close();\r\n        });\r\n        this.#closeButton.addEventListener(\"click\", (e) => {\r\n            this.dialog.close();\r\n        });\r\n    };\r\n\r\n    showModal = () => {\r\n        this.dialog.showModal();\r\n        this.#closeButton.focus();\r\n    }\r\n}\r\n\r\ncustomElements.define('information-dialog', InformationDialog);\n\n//# sourceURL=webpack://agroforestgrid/./src/components/informationDialog.js?");

/***/ }),

/***/ "./src/components/projectBar.js":
/*!**************************************!*\
  !*** ./src/components/projectBar.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ProjectBar: () => (/* binding */ ProjectBar)\n/* harmony export */ });\n/* harmony import */ var _settings_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../settings.js */ \"./src/settings.js\");\n/* harmony import */ var _js_mapGrid_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../js/mapGrid.js */ \"./src/js/mapGrid.js\");\n/* harmony import */ var _js_mapPolygons_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../js/mapPolygons.js */ \"./src/js/mapPolygons.js\");\n/* harmony import */ var _js_mapTrees_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../js/mapTrees.js */ \"./src/js/mapTrees.js\");\n/* harmony import */ var _js_dataAccessContext_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../js/dataAccessContext.js */ \"./src/js/dataAccessContext.js\");\n/* harmony import */ var _toggleSwitch_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./toggleSwitch.js */ \"./src/components/toggleSwitch.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst template = document.createElement('template');\r\ntemplate.innerHTML = `\r\n    <style>\r\n        .project-bar {\r\n            vertical-align: top;\r\n            background-color: #777;\r\n            padding: 0.2em;\r\n            overflow-x: scroll;\r\n            white-space: nowrap;\r\n            height: 2.6em;\r\n        }        \r\n        @media only screen and (min-width: 600px) {\r\n            .project-bar {\r\n                overflow-x: visible;\r\n                white-space: normal;\r\n                height: auto;\r\n            }\r\n        }\r\n\r\n        .control-group {\r\n            display: contents;\r\n            vertical-align: middle;\r\n        }\r\n        .control-container {\r\n            display: inline-block;\r\n            vertical-align: middle;\r\n            height: 1.8em;\r\n            padding: 0.3em;\r\n            margin: 0.1em 0 0.1em 0.1em;\r\n            background-color: #aaa;\r\n            border-radius: 0.3em;\r\n        }\r\n        .action-label {\r\n            display: inline-block;\r\n            vertical-align: middle;\r\n            font-size: 14px;\r\n            color: #222;\r\n            font-weight: bold;\r\n            line-height: 1.2em;\r\n            margin-left: 0.2em;\r\n            min-width: 3em;\r\n            text-align: right;\r\n        }\r\n        .action-button,\r\n        .location-button {\r\n            display: inline-block;\r\n            vertical-align: middle;\r\n            font-size: 14px;\r\n            color: #ddd;\r\n            background-color: #444;\r\n            border: none;\r\n            border-radius: 0.3em;\r\n            padding: 0.26em 0.7em;\r\n            margin: 0 0.1em;\r\n            text-align: center;\r\n            text-decoration: none;\r\n        }\r\n        .action-button:hover {\r\n            background-color: #222;\r\n        }\r\n        .action-button:disabled,\r\n        .action-button:disabled div {\r\n            color: #aaa;\r\n            background-color: #888;\r\n        }\r\n\r\n        .icon-button {\r\n            vertical-align: middle;\r\n            padding: 0.3em 0.4em;\r\n            height: 1.76em;\r\n            font-size: inherit;\r\n        }\r\n        .icon-button div {\r\n            display: inline-block;\r\n            width: 1em;\r\n            height: 1em;\r\n            background-repeat: no-repeat;\r\n        }\r\n        .icon-button-active {\r\n            background-color: #e1802e;\r\n        }\r\n        .icon-edit {\r\n            background-image: url(\"./img/edit.svg\");\r\n        }\r\n        .icon-add {\r\n            background-image: url(\"./img/plus.svg\");\r\n        }\r\n        .icon-draw {\r\n            background-image: url(\"./img/draw.svg\");\r\n        }\r\n        .icon-delete {\r\n            background-image: url(\"./img/delete.svg\");\r\n        }\r\n        .icon-undo {\r\n            background-image: url(\"./img/undo.svg\");\r\n        }\r\n        .icon-marker {\r\n            background-image: url(\"./img/marker.svg\");\r\n        }\r\n\r\n        .select-secondary,\r\n        .select-secondary option {\r\n            color: #000;\r\n            background-color: #ccc;\r\n        }\r\n    </style>\r\n    <section class=\"project-bar\">\r\n        <div id=\"project-controls\" class=\"control-container\">\r\n            <button id=\"location-button\" title=\"Show location\" class=\"location-button icon-button\">\r\n                <div class=\"icon-marker\"></div>\r\n            </button>\r\n            <button id=\"project-new-button\" title=\"Add Project\" class=\"action-button icon-button\">\r\n                <div class=\"icon-add\"></div>\r\n            </button>\r\n            <button id=\"project-dialog-button\" title=\"Edit Project\" class=\"action-button icon-button hidden\">\r\n                <div class=\"icon-edit\"></div>\r\n            </button>\r\n            <label for=\"project-dropdown\" class=\"action-label\">Project:</label>\r\n            <select id=\"project-dropdown\"></select>\r\n        </div>\r\n        <div id=\"segment-controls\" class=\"control-container hidden\">\r\n            <label for=\"segment-dropdown\" class=\"action-label\">Segment:</label>\r\n            <select id=\"segment-dropdown\"></select>\r\n            <button id=\"segment-undo-button\" title=\"Undo Segment Changes\" class=\"action-button icon-button\">\r\n                <div class=\"icon-undo\"></div>\r\n            </button>\r\n        </div>\r\n        <div id=\"drawing-controls\" class=\"control-group hidden\">\r\n            <div id=\"polygon-controls\" class=\"control-container\">\r\n                <toggle-switch id=\"polygon-display-toggle\" checked left-value=\"Polygons:\" title=\"Show/Hide Polygon\"></toggle-switch>\r\n                <select id=\"polygon-type-dropdown\" class=\"select-secondary\">\r\n                    <option value=\"boundary\">Boundary</option>\r\n                    <option value=\"treeGroup\">Tree Group</option>\r\n                </select>\r\n                <button id=\"polygon-delete-button\" title=\"Polygon Grid\" class=\"action-button icon-button\">\r\n                    <div class=\"icon-delete\"></div>\r\n                </button>\r\n            </div>\r\n            <div id=\"grid-controls\" class=\"control-container\">\r\n                <toggle-switch id=\"grid-display-toggle\" checked left-value=\"Grid:\" title=\"Show/Hide Grid\" ></toggle-switch>\r\n                <button id=\"grid-draw-button\" title=\"Draw Grid\" class=\"action-button icon-button\">\r\n                    <div class=\"icon-draw\"></div>\r\n                </button>\r\n                <button id=\"grid-delete-button\" title=\"Delete Grid\" class=\"action-button icon-button\">\r\n                    <div class=\"icon-delete\"></div>\r\n                </button>\r\n            </div>\r\n            <div id=\"trees-controls\" class=\"control-container\">\r\n                <toggle-switch id=\"trees-display-toggle\" checked left-value=\"Trees:\" title=\"Show/Hide Trees\" ></toggle-switch>\r\n                <button id=\"trees-draw-button\" title=\"Draw Trees\" class=\"action-button icon-button\">\r\n                    <div class=\"icon-draw\"></div>\r\n                </button>\r\n                <button id=\"trees-delete-button\" title=\"Delete Trees\" class=\"action-button icon-button\">\r\n                    <div class=\"icon-delete\"></div>\r\n                </button>\r\n            </div>\r\n        <div>\r\n    </section>\r\n`;\r\n\r\nclass ProjectBar extends HTMLElement {\r\n\r\n    static project = null;\r\n    static projectContext = null;\r\n    static dataAccess = null;\r\n    static locationEnabled = false;\r\n\r\n    polygonVisibilityBoundary = true;\r\n    polygonVisibilityTreeGroup = true;\r\n\r\n    #locationButton = null;\r\n    #projectNewButton = null;\r\n    #projectDialogButton = null;\r\n    #projectDropdown = null;\r\n    #segmentControls = null;\r\n    #segmentDropdown = null;\r\n    #segmentUndoButton = null;\r\n\r\n    #drawingControls = null;\r\n    #gridDisplayToggle = null;\r\n    #gridDrawButton = null;\r\n    #gridDeleteButton = null;\r\n    #polygonsDisplayToggle = null;\r\n    #polygonTypeDropdown = null;\r\n    #polygonsDeleteButton = null;\r\n    #treesDisplayToggle = null;\r\n    #treesDrawButton = null;\r\n    #treesDeleteButton = null;\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    connectedCallback() {\r\n        const shadow = this.attachShadow({ mode: 'open' });\r\n        shadow.appendChild(template.content.cloneNode(true));\r\n\r\n        // get data-stylesheet variable\r\n        const projectStylesheet = this.getAttribute('data-stylesheet');\r\n\r\n        // Add project stylesheets to the shadow dom\r\n        const projectStyles = document.createElement(\"link\");\r\n        projectStyles.setAttribute(\"rel\", \"stylesheet\");\r\n        projectStyles.setAttribute(\"href\", projectStylesheet);\r\n        shadow.appendChild(projectStyles);\r\n\r\n        this.dataAccess = _js_dataAccessContext_js__WEBPACK_IMPORTED_MODULE_4__.create(_settings_js__WEBPACK_IMPORTED_MODULE_0__.dataStoreType);\r\n\r\n        this.#locationButton = shadow.querySelector('#location-button');\r\n        this.#projectNewButton = shadow.querySelector('#project-new-button');\r\n        this.#projectDialogButton = shadow.querySelector('#project-dialog-button');\r\n        this.#projectDropdown = shadow.querySelector('#project-dropdown');\r\n\r\n        this.#segmentControls = shadow.querySelector('#segment-controls');\r\n        this.#segmentDropdown = shadow.querySelector('#segment-dropdown');\r\n        this.#segmentUndoButton = shadow.querySelector('#segment-undo-button');\r\n\r\n        this.#drawingControls = shadow.querySelector('#drawing-controls');\r\n        this.#gridDisplayToggle = shadow.querySelector('#grid-display-toggle');\r\n        this.#gridDrawButton = shadow.querySelector('#grid-draw-button');\r\n        this.#gridDeleteButton = shadow.querySelector('#grid-delete-button');\r\n        this.#polygonsDisplayToggle = shadow.querySelector('#polygon-display-toggle');\r\n        this.#polygonTypeDropdown = shadow.querySelector('#polygon-type-dropdown');\r\n        this.#polygonsDeleteButton = shadow.querySelector('#polygon-delete-button');\r\n        this.#treesDisplayToggle = shadow.querySelector('#trees-display-toggle');\r\n        this.#treesDrawButton = shadow.querySelector('#trees-draw-button');\r\n        this.#treesDeleteButton = shadow.querySelector('#trees-delete-button');\r\n\r\n        this.#setupEventHandlers();\r\n        this.#populateProjectDropdown(null);\r\n    }\r\n\r\n    #populateProjectDropdown = (currentProjectKey) => {\r\n        const projects = this.dataAccess.projectListGet();\r\n\r\n        this.#projectDropdown.innerHTML = '';\r\n\r\n        projects.forEach(project => {\r\n            const option = document.createElement('option');\r\n            option.text = project.projectName;\r\n            option.value = project.projectKey;\r\n            this.#projectDropdown.appendChild(option);\r\n        });\r\n\r\n        if (currentProjectKey !== null) {\r\n            this.#projectDialogButton.classList.remove(\"hidden\");\r\n            this.#segmentControls.classList.remove('hidden');\r\n            this.#drawingControls.classList.remove(\"hidden\");\r\n        }\r\n\r\n        this.#projectDropdown.value = currentProjectKey;\r\n    }\r\n\r\n    #populateSegmentDropdown = (project, currentSegmentKey) => {\r\n\r\n        this.#segmentDropdown.innerHTML = '';\r\n\r\n        if (project && project.segments) {\r\n            project.segments.forEach(s => {\r\n                const option = document.createElement('option');\r\n                option.text = s.segmentName;\r\n                option.value = s.segmentKey;\r\n                this.#segmentDropdown.appendChild(option);\r\n            });\r\n        }\r\n\r\n        this.#segmentDropdown.value = currentSegmentKey;\r\n    }\r\n\r\n    #setupControls = (projectContext) => {\r\n        this.locationEnabled = false;\r\n        this.#locationButton.classList.remove('icon-button-active');\r\n        \r\n        this.#gridDisplayToggle.checked = projectContext.segmentSettings.mapGridVisible;\r\n        this.#gridDrawButton.disabled = !projectContext.segmentSettings.mapGridVisible;\r\n        this.#gridDeleteButton.disabled = !projectContext.segmentSettings.mapGridVisible;\r\n\r\n        this.polygonVisibilityBoundary = projectContext.segmentSettings.polygonBoundaryVisible;\r\n        this.polygonVisibilityTreeGroup = projectContext.segmentSettings.polygonsTreeGroupVisible;\r\n        this.#polygonsDisplayToggle.checked = this.polygonVisibilityBoundary;\r\n        this.#polygonTypeDropdown.value = 'boundary';\r\n        this.#polygonsDeleteButton.disabled = !this.polygonVisibilityBoundary;\r\n\r\n        this.#treesDisplayToggle.checked = projectContext.segmentSettings.treesVisible;\r\n        this.#treesDrawButton.disabled = !projectContext.segmentSettings.treesVisible;\r\n        this.#treesDeleteButton.disabled = !projectContext.segmentSettings.treesVisible;\r\n    }\r\n\r\n    #setupEventHandlers = () => {\r\n        window.addEventListener('project-updated', (e) => this.projectRefresh(e.detail.projectKey));\r\n        window.addEventListener('project-changed', (e) => this.projectRefresh(e.detail.projectKey));\r\n\r\n        this.#locationButton.addEventListener('click', () => {\r\n            this.locationEnabled = !this.locationEnabled;\r\n\r\n            if (this.locationEnabled) {\r\n                this.#locationButton.classList.add('icon-button-active');\r\n            } else {\r\n                this.#locationButton.classList.remove('icon-button-active');\r\n            }\r\n\r\n            window.dispatchEvent(new CustomEvent('location-action', { detail: { enabled: this.locationEnabled } }));\r\n        });\r\n\r\n        this.#projectNewButton.addEventListener('click', () => {\r\n            window.dispatchEvent(new CustomEvent('project-new'));\r\n        });\r\n\r\n        this.#projectDialogButton.addEventListener('click', () => {\r\n            const projectKey = this.#projectDropdown.value;\r\n            window.dispatchEvent(new CustomEvent('project-dialog-open', { detail: { projectKey: projectKey } }));\r\n        });\r\n\r\n        this.#projectDropdown.addEventListener('change', () => {\r\n            const projectKey = this.#projectDropdown.value;\r\n            window.dispatchEvent(new CustomEvent('project-changed', { detail: { projectKey: projectKey } }));\r\n        });\r\n\r\n        this.#segmentDropdown.addEventListener('change', () => {\r\n            const projectKey = this.#projectDropdown.value;\r\n            const segmentKey = this.#segmentDropdown.value;\r\n            window.dispatchEvent(new CustomEvent('segment-changed', { detail: { projectKey: projectKey, segmentKey: segmentKey } }));\r\n        });\r\n\r\n        this.#segmentUndoButton.addEventListener('click', () => {\r\n            const projectKey = this.#projectDropdown.value;\r\n            this.dataAccess.segmentStateUndo(projectKey);\r\n            window.dispatchEvent(new CustomEvent('segment-updated'));\r\n        });\r\n\r\n        this.#gridDisplayToggle.addEventListener(\"toggle\", (e) => {\r\n            this.#gridDrawButton.disabled = !e.detail.value;\r\n            this.#gridDeleteButton.disabled = !e.detail.value;\r\n            _js_mapGrid_js__WEBPACK_IMPORTED_MODULE_1__.setVisibility(this.projectContext, e.detail.value);\r\n        });\r\n\r\n        this.#gridDrawButton.addEventListener('click', () => {\r\n            _js_mapGrid_js__WEBPACK_IMPORTED_MODULE_1__.drawGrid(this.projectContext);\r\n        });\r\n\r\n        this.#gridDeleteButton.addEventListener('click', () => {\r\n            _js_mapGrid_js__WEBPACK_IMPORTED_MODULE_1__.deleteGrid(this.projectContext);\r\n        });\r\n\r\n\r\n        this.#polygonsDisplayToggle.addEventListener(\"toggle\", (e) => {\r\n            const selectedPolygonType = this.#polygonTypeDropdown.value;\r\n\r\n            if (selectedPolygonType == 'boundary') {\r\n                this.polygonVisibilityBoundary = e.detail.value;\r\n            }\r\n\r\n            if (selectedPolygonType == 'treeGroup') {\r\n                this.polygonVisibilityTreeGroup = e.detail.value;\r\n            }\r\n\r\n            this.#polygonsDeleteButton.disabled = !e.detail.value;\r\n            _js_mapPolygons_js__WEBPACK_IMPORTED_MODULE_2__.setVisibility(this.projectContext, selectedPolygonType, e.detail.value);\r\n        });\r\n\r\n        this.#polygonTypeDropdown.addEventListener('change', (e) => {\r\n            const selectedPolygonType = this.#polygonTypeDropdown.value;\r\n\r\n            if (selectedPolygonType == 'boundary') {\r\n                this.#polygonsDisplayToggle.checked = this.polygonVisibilityBoundary;\r\n                this.#polygonsDeleteButton.disabled = !this.polygonVisibilityBoundary;\r\n            }\r\n\r\n            if (selectedPolygonType == 'treeGroup') {\r\n                this.#polygonsDisplayToggle.checked = this.polygonVisibilityTreeGroup;\r\n                this.#polygonsDeleteButton.disabled = !this.polygonVisibilityTreeGroup;\r\n            }\r\n\r\n            window.dispatchEvent(new CustomEvent('polygon-type-changed', { detail: { polygonType: selectedPolygonType } }));\r\n        });\r\n\r\n        this.#polygonsDeleteButton.addEventListener('click', () => {\r\n            const selectedPolygonType = this.#polygonTypeDropdown.value;\r\n            _js_mapPolygons_js__WEBPACK_IMPORTED_MODULE_2__.deletePolygons(this.projectContext, selectedPolygonType);\r\n        });\r\n\r\n\r\n        this.#treesDisplayToggle.addEventListener(\"toggle\", (e) => {\r\n            this.#treesDrawButton.disabled = !e.detail.value;\r\n            this.#treesDeleteButton.disabled = !e.detail.value;\r\n            _js_mapTrees_js__WEBPACK_IMPORTED_MODULE_3__.setVisibility(this.projectContext, e.detail.value);\r\n        });\r\n\r\n        this.#treesDrawButton.addEventListener('click', () => {\r\n            _js_mapTrees_js__WEBPACK_IMPORTED_MODULE_3__.drawTrees(this.projectContext);\r\n        });\r\n\r\n        this.#treesDeleteButton.addEventListener('click', () => {\r\n            _js_mapTrees_js__WEBPACK_IMPORTED_MODULE_3__.deleteTrees(this.projectContext);\r\n        });\r\n    };\r\n\r\n    projectRefresh = (projectKey) => {\r\n        this.#populateProjectDropdown(projectKey);\r\n        this.#populateSegmentDropdown(projectKey, null);\r\n    };\r\n\r\n    setup = (projectContext, project) => {\r\n        this.projectContext = projectContext;\r\n        this.project = project;\r\n        this.#populateProjectDropdown(project.projectKey);\r\n        this.#populateSegmentDropdown(project, projectContext.segmentKey);\r\n        this.#setupControls(projectContext);\r\n    };\r\n}\r\n\r\ncustomElements.define('project-bar', ProjectBar);\n\n//# sourceURL=webpack://agroforestgrid/./src/components/projectBar.js?");

/***/ }),

/***/ "./src/components/projectDialog.js":
/*!*****************************************!*\
  !*** ./src/components/projectDialog.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ProjectDialog: () => (/* binding */ ProjectDialog)\n/* harmony export */ });\n/* harmony import */ var _settings_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../settings.js */ \"./src/settings.js\");\n/* harmony import */ var _js_dataAccessContext_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../js/dataAccessContext.js */ \"./src/js/dataAccessContext.js\");\n/* harmony import */ var _js_mapUtils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../js/mapUtils.js */ \"./src/js/mapUtils.js\");\n/* harmony import */ var _projectSegment_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./projectSegment.js */ \"./src/components/projectSegment.js\");\n\r\n\r\n\r\n\r\n\r\nconst template = document.createElement('template');\r\ntemplate.innerHTML = `\r\n    <dialog id=\"dialog-projects\">\r\n        <div id=\"dialog-close-x\" class=\"dialog-close-x\">&#10005</div>\r\n        <h3 id=\"project-form-title\">Project</h3>\r\n            <icon-button id=\"project-delete-button\" title=\"Delete Project\" stroke-colour=\"#999\" class=\"form-button-delete hidden\"\r\n                icon-svg-path=\"m 4 3 v 14 H 16 V 3 M 2 3 L 18 3 M 8 15 V 5 M 12 15 V 5 M 6 2 H 14\"></icon-button>\r\n        <div id=\"project-form\">\r\n            <div class=\"form-item\">\r\n                <label for=\"project-name\">Name:</label>\r\n                <input id=\"project-name\" type=\"text\" maxlength=\"50\" class=\"form-input-text\"></input>\r\n            </div>\r\n            <div class=\"form-item\">\r\n                <label for=\"project-notes\">Notes:</label>\r\n                <textarea id=\"project-notes\" rows=\"3\" cols=\"22\" maxlength=\"500\" class=\"form-input-text\"></textarea>\r\n            </div>\r\n            <div id=\"project-summary\" class=\"form-summary\"></div>\r\n            <div id=\"segments-header\" class=\"hidden\">\r\n                <icon-button id=\"segment-add-button\" title=\"Add Segment\" stroke-colour=\"#999\" class=\"form-button-add hidden\"\r\n                icon-svg-path=\"M 10 2 L 10 18 M 2 10 L 18 10\"></icon-button>\r\n                <h3>Segments</h3>\r\n            </div>\r\n            <div id=\"segments-list\">\r\n            </div>\r\n        </div>\r\n        <div class=\"dialog-button-container\">\r\n            <button id=\"project-save-button\" class=\"dialog-button\">Save</button>\r\n            <button id=\"dialog-close-button\" class=\"dialog-button-secondary\">Cancel</button>\r\n        </div>\r\n    </dialog>\r\n`;\r\n\r\nclass ProjectDialog extends HTMLElement {\r\n\r\n    static dialog = null;\r\n    static dataAccess = null;\r\n    static project = null;\r\n\r\n    #closeX = null;\r\n    #closeButton = null;\r\n    #projectSaveButton = null;\r\n    #projectStylesheet = null;\r\n    #projectDeleteButton = null;\r\n    #projectFormTitle = null;\r\n    #projectName = null;\r\n    #projectNotes = null;\r\n    #projectSummary = null;\r\n    #segmentsHeader = null;\r\n    #segmentAddButton = null;\r\n    #segmentList = null;\r\n    #segmentComponentsArray = [];\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    connectedCallback() {\r\n        const shadow = this.attachShadow({ mode: 'open' });\r\n        shadow.appendChild(template.content.cloneNode(true));\r\n\r\n        // get data-stylesheet variable\r\n        this.#projectStylesheet = this.getAttribute('data-stylesheet');\r\n\r\n        // Add project stylesheets to the shadow dom\r\n        const projectStyles = document.createElement(\"link\");\r\n        projectStyles.setAttribute(\"rel\", \"stylesheet\");\r\n        projectStyles.setAttribute(\"href\", this.#projectStylesheet);\r\n        shadow.appendChild(projectStyles);\r\n\r\n        this.dialog = shadow.querySelector('#dialog-projects');\r\n        this.dataAccess = _js_dataAccessContext_js__WEBPACK_IMPORTED_MODULE_1__.create(_settings_js__WEBPACK_IMPORTED_MODULE_0__.dataStoreType);\r\n\r\n        this.#projectFormTitle = shadow.querySelector('#project-form-title');\r\n        this.#projectName = shadow.querySelector('#project-name');\r\n        this.#projectNotes = shadow.querySelector('#project-notes');\r\n        this.#projectSummary = shadow.querySelector('#project-summary');\r\n\r\n        this.#segmentsHeader = shadow.querySelector('#segments-header');\r\n        this.#segmentAddButton = shadow.querySelector('#segment-add-button');\r\n        this.#segmentList = shadow.querySelector('#segments-list');\r\n\r\n        this.#closeX = shadow.querySelector('#dialog-close-x');\r\n        this.#closeButton = shadow.querySelector('#dialog-close-button');\r\n        this.#projectSaveButton = shadow.querySelector('#project-save-button');\r\n        this.#projectDeleteButton = shadow.querySelector('#project-delete-button');\r\n\r\n        this.#setupEventHandlers();\r\n        this.#projectFormClear();\r\n    }\r\n\r\n    #setupForm = (projectKey) => {\r\n        this.#projectFormClear();\r\n        this.dialog.showModal();\r\n\r\n        if (projectKey) {\r\n            this.#projectFormTitle.innerText = \"Project\";\r\n            this.project = this.dataAccess.projectGet(projectKey);\r\n            this.#projectFormPopulate();\r\n            this.#projectDeleteButton.classList.remove(\"hidden\");\r\n            this.#segmentsHeader.classList.remove(\"hidden\");\r\n            this.#segmentAddButton.classList.remove(\"hidden\");\r\n            this.#closeButton.focus();\r\n        }\r\n        else {\r\n            this.#projectFormTitle.innerText = \"New Project\";\r\n            this.project = null;\r\n            this.#projectDeleteButton.classList.add(\"hidden\");\r\n            this.#segmentsHeader.classList.add(\"hidden\");\r\n            this.#segmentAddButton.classList.add(\"hidden\");\r\n            this.#projectName.focus();\r\n        }\r\n    }\r\n\r\n    open = (projectKey) => {\r\n        this.#setupForm(projectKey);\r\n    }\r\n\r\n    close = () => {\r\n        this.dialog.close();\r\n        this.project = null;\r\n    }\r\n\r\n    #setupEventHandlers = () => {\r\n        window.addEventListener('project-new', () => this.open());\r\n        window.addEventListener('project-dialog-open', (e) => this.open(e.detail.projectKey));\r\n        window.addEventListener('segment-deleted', (e) => this.#segmentDelete(e.detail.segmentKey, e.detail.segmentName));\r\n\r\n        this.#closeX.addEventListener(\"click\", (e) => {\r\n            this.close();\r\n        });\r\n        this.#closeButton.addEventListener(\"click\", (e) => {\r\n            this.close();\r\n        });\r\n\r\n        this.#segmentAddButton.addEventListener(\"click\", (e) => {\r\n            const segmentCount = this.project.segments.length;\r\n            this.#segmentCreate(`Segment ${segmentCount + 1}`);\r\n            this.#setupForm(this.project.projectKey);\r\n        });\r\n\r\n        this.#projectSaveButton.addEventListener(\"click\", (e) => {\r\n            if (this.#projectName.value === \"\") {\r\n                const err = `Please enter a project name`;\r\n                window.alert(err);\r\n                return;\r\n            }\r\n\r\n            if (this.project) {\r\n                this.#projectUpdate();\r\n                this.close();\r\n            } else {\r\n                this.#projectCreate();\r\n                this.close();\r\n            }\r\n        });\r\n\r\n        this.#projectDeleteButton.addEventListener(\"click\", (e) => {\r\n            this.#projectDelete();\r\n            this.close();\r\n        });\r\n    };\r\n\r\n    #projectFormClear = () => {\r\n        this.#projectName.value = \"\";\r\n        this.#projectNotes.value = \"\";\r\n        this.#projectSummary.innerHTML = \"\";\r\n        this.#segmentList.innerHTML = \"\";\r\n\r\n        this.#projectDeleteButton.classList.add(\"hidden\");\r\n    }\r\n\r\n    #projectFormPopulate = () => {\r\n        this.#projectName.value = this.project.projectName;\r\n        this.#projectNotes.value = this.project.projectNotes;\r\n\r\n        let boundaryPerimeterTotal = 0;\r\n        let boundaryAreaTotal = 0;\r\n        let totalTreeCount = 0;\r\n\r\n        this.project.segments.forEach((s, index) => {\r\n\r\n            const boundaryPolygon = s.polygons ? (s.polygons.filter(p => p.type == 'boundary') ? s.polygons.filter(p => p.type == 'boundary')[0] : null) : null;\r\n            \r\n            const boundaryPerimeter = boundaryPolygon != null && boundaryPolygon.perimeter ? boundaryPolygon.perimeter : 0;\r\n            boundaryPerimeterTotal += boundaryPerimeter;\r\n            const boundaryPerimeterMeters = (boundaryPerimeter).toFixed(1);\r\n\r\n            const boundaryArea = boundaryPolygon != null && boundaryPolygon.area ? boundaryPolygon.area : 0;\r\n            boundaryAreaTotal += boundaryArea;\r\n            const boundaryAreaHectares = (boundaryArea / 10000).toFixed(2);\r\n\r\n            const treeCount = s.trees.points ? s.trees.points.length : 0;\r\n            totalTreeCount += treeCount;\r\n\r\n            const segmentComponent = document.createElement('project-segment');\r\n            segmentComponent.setAttribute('data-stylesheet', this.#projectStylesheet);\r\n            this.#segmentList.appendChild(segmentComponent);\r\n            this.#segmentComponentsArray.push(segmentComponent);\r\n\r\n            const segmentValues = {\r\n                segmentCount: this.project.segments.length,\r\n                segmentKey: s.segmentKey,\r\n                segmentName: s.segmentName,\r\n                segmentNotes: s.segmentNotes,\r\n                mapGridWidth: s.grid.width,\r\n                mapGridHeight: s.grid.height,\r\n                treeDiameter: s.trees.diameter,\r\n                treeCount: s.trees.points ? s.trees.points.length : 0,\r\n                boundaryPerimeterMeters: boundaryPerimeterMeters,\r\n                boundaryAreaHectares: boundaryAreaHectares\r\n            };\r\n            segmentComponent.setup(segmentValues, index);\r\n        });\r\n\r\n        this.#projectSummary.innerHTML = `Total boundary perimeter: ${(boundaryPerimeterTotal).toFixed(1)} m\r\n            <br />Total boundary area: ${(boundaryAreaTotal / 10000).toFixed(2)} hect\r\n            <br />Total tree count: ${totalTreeCount}`;\r\n\r\n        this.#projectDeleteButton.classList.remove(\"hidden\");\r\n    }\r\n\r\n    #projectCreate = () => {\r\n        // Create a new project name\r\n        let projectName = this.#projectName.value;\r\n        let projectNotes = this.#projectNotes.value;\r\n\r\n        this.project = this.dataAccess.projectCreate(projectName, projectNotes);\r\n\r\n        // Create a new segment\r\n        this.#segmentCreate(\"Segment 1\");\r\n\r\n        window.dispatchEvent(new CustomEvent('project-changed', { detail: { projectKey: this.project.projectKey } }));\r\n    }\r\n\r\n    #projectUpdate = () => {\r\n        this.project.projectName = this.#projectName.value;\r\n        this.project.projectNotes = this.#projectNotes.value;\r\n\r\n        this.#segmentComponentsArray.forEach(c => {\r\n            const values = c.getValues();\r\n            const index = this.project.segments.findIndex(seg => seg.segmentKey === values.segmentKey);\r\n            if (index !== -1) {\r\n                const s = this.project.segments[index];\r\n                s.segmentName = values.segmentName;\r\n                s.segmentNotes = values.segmentNotes;\r\n                s.grid.width = values.mapGridWidth;\r\n                s.grid.height = values.mapGridHeight;\r\n                s.trees.diameter = values.treeDiameter;\r\n            }\r\n        });\r\n\r\n        this.dataAccess.projectUpdate(this.project);\r\n\r\n        window.dispatchEvent(new CustomEvent('project-updated', { detail: { projectKey: this.project.projectKey } }));\r\n    }\r\n\r\n    #projectDelete = () => {\r\n        if (confirm(`Confirm that you want to delete the ${this.project.projectName} project?`) == true) {\r\n            this.dataAccess.projectDelete(this.project.projectKey);\r\n\r\n            window.dispatchEvent(new CustomEvent('project-changed', { detail: { projectKey: null } }));\r\n        }\r\n        this.project = null;\r\n    }\r\n\r\n    #segmentCreate = (segmentName) => {\r\n        // Create a new segment\r\n        const mapDetails = _js_mapUtils_js__WEBPACK_IMPORTED_MODULE_2__.getMapDetailsFromUrl();\r\n        const segment = this.dataAccess.segmentCreate(this.project.projectKey, segmentName, mapDetails);\r\n\r\n        const projectKey = (this.project) ? this.project.projectKey : \"\";\r\n        window.dispatchEvent(new CustomEvent('segment-changed', { detail: { projectKey: projectKey, segmentKey: segment.segmentKey } }));\r\n    }\r\n\r\n    #segmentDelete = (segmentKey, segmentName) => {\r\n        if (confirm(`Confirm that you want to delete the ${segmentName} segment?`) == true) {\r\n            this.dataAccess.segmentDelete(this.project.projectKey, segmentKey);\r\n\r\n            const projectKey = (this.project) ? this.project.projectKey : \"\";\r\n            window.dispatchEvent(new CustomEvent('segment-changed', { detail: { projectKey: projectKey, segmentKey: \"\" } }));\r\n\r\n            this.close();\r\n        }\r\n    }\r\n}\r\n\r\ncustomElements.define('project-dialog', ProjectDialog);\n\n//# sourceURL=webpack://agroforestgrid/./src/components/projectDialog.js?");

/***/ }),

/***/ "./src/components/projectSegment.js":
/*!******************************************!*\
  !*** ./src/components/projectSegment.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ProjectSegment: () => (/* binding */ ProjectSegment)\n/* harmony export */ });\n/* harmony import */ var _settings_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../settings.js */ \"./src/settings.js\");\n\r\n\r\nconst template = document.createElement('template');\r\ntemplate.innerHTML = `\r\n<section class=\"map-segment\">\r\n    <hr/>\r\n    <icon-button id=\"segment-delete-button\" title=\"Delete Segment\" stroke-colour=\"#999\" class=\"form-button-delete hidden\"\r\n       icon-svg-path=\"m 4 3 v 14 H 16 V 3 M 2 3 L 18 3 M 8 15 V 5 M 12 15 V 5 M 6 2 H 14\"></icon-button>\r\n    <div class=\"form-item\">\r\n        <label for=\"segmentName\">Name:</label>\r\n        <input id=\"segmentName\" type=\"text\" maxlength=\"50\" class=\"form-input-text\"></input>\r\n    </div>\r\n    <div class=\"form-item\">\r\n        <label for=\"segmentNotes\">Notes:</label>\r\n        <textarea id=\"segmentNotes\" rows=\"3\" cols=\"22\" maxlength=\"500\" class=\"form-input-text\"></textarea>\r\n    </div>\r\n    <div class=\"form-item\">\r\n        <label for=\"mapGridWidth\">Grid Width:</label>\r\n        <input id=\"mapGridWidth\" type=\"number\" min=\"1\" max=\"99\" maxlength=\"3\" style=\"width:2.8em\">\r\n        <span>meters</span>\r\n    </div>\r\n    <div class=\"form-item\">\r\n        <label for=\"mapGridHeight\">Grid Height:</label>\r\n        <input id=\"mapGridHeight\" type=\"number\" min=\"1\" max=\"99\" maxlength=\"3\" style=\"width:2.8em\">\r\n        <span>meters</span>\r\n    </div>\r\n    <div class=\"form-item\">\r\n        <label for=\"mapTreeDiameter\">Tree Diameter:</label>\r\n        <input id=\"mapTreeDiameter\" type=\"number\" min=\"1\" max=\"99\" maxlength=\"3\" style=\"width:2.8em\">\r\n        <span>meters</span>\r\n    </div>\r\n    <div id=\"segment-summary\" class=\"form-summary\"><div>\r\n</section>\r\n`;\r\n\r\nclass ProjectSegment extends HTMLElement {\r\n\r\n    #segmentKey = null;\r\n    #segmentNameTextBox = null;\r\n    #segmentNotesTextBox = null;\r\n    #segmentDeleteButton = null;\r\n    #gridWidthTextBox = null;\r\n    #gridHeightTextBox = null;\r\n    #treeDiameterTextBox = null;\r\n    #segmentSummary = null;\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    connectedCallback() {\r\n        const shadow = this.attachShadow({ mode: 'open' });\r\n        shadow.appendChild(template.content.cloneNode(true));\r\n\r\n        // get data-stylesheet variable\r\n        const projectStylesheet = this.getAttribute('data-stylesheet');\r\n\r\n        // Add project stylesheets to the shadow dom\r\n        const projectStyles = document.createElement(\"link\");\r\n        projectStyles.setAttribute(\"rel\", \"stylesheet\");\r\n        projectStyles.setAttribute(\"href\", projectStylesheet);\r\n        shadow.appendChild(projectStyles);\r\n\r\n        this.#segmentNameTextBox = shadow.querySelector('#segmentName');\r\n        this.#segmentNotesTextBox = shadow.querySelector('#segmentNotes');\r\n        this.#segmentDeleteButton = shadow.querySelector('#segment-delete-button');\r\n        this.#gridWidthTextBox = shadow.querySelector('#mapGridWidth');\r\n        this.#gridHeightTextBox = shadow.querySelector('#mapGridHeight');\r\n        this.#treeDiameterTextBox = shadow.querySelector('#mapTreeDiameter');\r\n        this.#segmentSummary = shadow.querySelector('#segment-summary');\r\n\r\n        this.#setupEventHandlers();\r\n    }\r\n\r\n    #setupEventHandlers = () => {\r\n        this.#segmentDeleteButton.addEventListener(\"click\", (e) => {\r\n            window.dispatchEvent(new CustomEvent('segment-deleted', { detail: { segmentKey: this.#segmentKey, segmentName: this.#segmentNameTextBox.value } }));\r\n        });\r\n\r\n        this.#gridWidthTextBox.addEventListener('input', (e) => {\r\n            this.#maxLengthCheck(this.#gridWidthTextBox);\r\n        });\r\n        this.#gridHeightTextBox.addEventListener('input', (e) => {\r\n            this.#maxLengthCheck(this.#gridHeightTextBox);\r\n        });\r\n        this.#treeDiameterTextBox.addEventListener('input', (e) => {\r\n            this.#maxLengthCheck(this.#treeDiameterTextBox);\r\n        });\r\n    };\r\n\r\n    getValues = () => {\r\n        let values = {\r\n            segmentKey: this.#segmentKey,\r\n            segmentName: this.#segmentNameTextBox.value,\r\n            segmentNotes: this.#segmentNotesTextBox.value,\r\n            mapGridWidth: this.#gridWidthTextBox.value,\r\n            mapGridHeight: this.#gridHeightTextBox.value,\r\n            treeDiameter: this.#treeDiameterTextBox.value,\r\n        }\r\n        return values;\r\n    }\r\n\r\n    setup = (values, index) => {\r\n        this.#segmentKey = values.segmentKey;\r\n        this.#segmentNameTextBox.value = values.segmentName;\r\n        this.#segmentNotesTextBox.value = values.segmentNotes;\r\n        this.#gridWidthTextBox.value = values.mapGridWidth;\r\n        this.#gridHeightTextBox.value = values.mapGridHeight;\r\n        this.#treeDiameterTextBox.value = values.treeDiameter;\r\n\r\n        this.#segmentSummary.innerHTML = `Boundary perimeter: ${values.boundaryPerimeterMeters} m\r\n            <br />Boundary area: ${values.boundaryAreaHectares} hect\r\n            <br />Tree count: ${values.treeCount}`;\r\n\r\n        if (values.segmentCount > 1) {\r\n            this.#segmentDeleteButton.classList.remove(\"hidden\");\r\n        }\r\n    }\r\n\r\n    #maxLengthCheck = (object) => {\r\n        if (object.value.length > object.maxLength)\r\n            object.value = object.value.slice(0, object.maxLength)\r\n    }\r\n}\r\n\r\ncustomElements.define('project-segment', ProjectSegment);\n\n//# sourceURL=webpack://agroforestgrid/./src/components/projectSegment.js?");

/***/ }),

/***/ "./src/components/toggleSwitch.js":
/*!****************************************!*\
  !*** ./src/components/toggleSwitch.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ToggleSwitch: () => (/* binding */ ToggleSwitch)\n/* harmony export */ });\n// https://github.com/akhil0001/jellySwitch\r\n// https://github.com/akhil0001/jellySwitch/blob/master/lib/index.js\r\n\r\nconst KEYCODE = {\r\n    SPACE: 32,\r\n    TAB: 9\r\n};\r\nconst template = document.createElement('template');\r\n\r\nconst templateHTML  = `\r\n        <div class=\"switch\">\r\n        <label for=\"toggle-switch\" id=\"content-left\"></label>\r\n\r\n        <input type=\"checkbox\" name=\"toggle-switch\" id=\"toggle-switch\"></input>\r\n        <label for=\"toggle-switch\" id=\"switch\">\r\n        <p id=\"jelly-content\"></p>\r\n        </label>\r\n\r\n        <label for=\"toggle-switch\" id=\"content-right\"></label>\r\n        </div>\r\n        <style>\r\n\r\n        :host(:focus)\r\n        {\r\n            outline:none;\r\n            --highlight-scale:12px;\r\n        }\r\n        :host([disabled]) label\r\n        {\r\n            cursor:not-allowed;\r\n            opacity:0.5;\r\n            --highlight-scale:2px;\r\n        }\r\n        input#toggle-switch[type=checkbox]{\r\n            height: 0;\r\n            width: 0;\r\n            margin:0;\r\n            visibility: hidden;\r\n        }\r\n        .switch\r\n        {\r\n            display:inline-block;\r\n            font-family:inherit;\r\n            vertical-align: middle;\r\n        }\r\n        label\r\n        {\r\n            cursor: pointer;\r\n        }\r\n        label#switch{\r\n            text-indent: -9999px;\r\n            width: 50px;\r\n            height: 25px;\r\n            //top:5px;\r\n            display: inline-block;\r\n            vertical-align: middle;\r\n            border-radius: 100px;\r\n            position: relative;\r\n            outline:none;\r\n            -ms-user-select: none;\r\n            -webkit-touch-callout: none;\r\n             -webkit-user-select: none;\r\n             -khtml-user-select: none;\r\n             -moz-user-select: none;\r\n             -ms-user-select: none;\r\n             user-select: none;\r\n             -webkit-tap-highlight-color: transparent;\r\n            background: var(--off-color,#888);\r\n            // box-shadow: 0 1px var(--highlight-scale,4px) -1px var(--off-color,#ccc);\r\n            transition: .2s ease-in-out;\r\n        }\r\n        p#jelly-content {\r\n            box-sizing:border-box;\r\n            content: '';\r\n            position: absolute;\r\n            top: -11px;\r\n            left: 2px;\r\n            width: 21px;\r\n            height: 21px;\r\n            background:var(--offHandle-color,#eee);\r\n            border-radius: 21px;\r\n            transition: background  .5s ease-in;\r\n        }\r\n        label#content-left\r\n        {\r\n            //position:relative;\r\n            // margin: 5px;\r\n            //display: inline-block;\r\n            //vertical-align: top;\r\n            //padding: 0.7em 0 0.7em 0.5em;\r\n            //color: #fff;\r\n\r\n            display: inline-block;\r\n            vertical-align: middle;\r\n            font-size: 14px;\r\n            color: #222;\r\n            font-weight: bold;\r\n            line-height: 1.4em;\r\n            margin-left: 0.2em;\r\n            min-width: 3em;\r\n            text-align: right;\r\n        }\r\n        label#content-right\r\n        {\r\n            //position:relative;\r\n            //margin: 5px;\r\n            \r\n            //display: inline-block;\r\n            vertical-align: middle;\r\n        }\r\n        :host([aria-checked = \"false\"]) p#jelly-content\r\n        {\r\n            animation:expand-left 0.5s linear forwards;\r\n        }\r\n        :host([aria-checked = \"true\"][checked]) label#switch {\r\n            background: var(--on-color,#444);\r\n            // box-shadow: 0 2px var(--highlight-scale,4px) -1px var(--on-color,#999);\r\n        }\r\n\r\n        :host([aria-checked = \"true\"]) p#jelly-content {\r\n            background:var(--onHandle-color,#eee);\r\n\r\n            animation:expand-right .5s linear forwards;\r\n            transition: background  .5s ease-in;\r\n        }\r\n\r\n        @-webkit-keyframes expand-right\r\n        {\r\n            0%\r\n            {\r\n                left:2px;\r\n            }\r\n            30%,50%\r\n            {\r\n                left:2px;\r\n                width:46px;\r\n\r\n            }\r\n            60%\r\n            {\r\n                left:34px;\r\n                width:14px;\r\n            }\r\n            80%\r\n            {\r\n                left:24px;\r\n                width:24px;\r\n            }\r\n            90%\r\n            {\r\n                left:29px;\r\n                width:19px;\r\n            }\r\n            100%\r\n            {\r\n                left:27px;\r\n                width:21px;\r\n            }\r\n        }\r\n\r\n        @keyframes expand-right\r\n        {\r\n            0%\r\n            {\r\n                left:2px;\r\n\r\n            }\r\n            30%,50%\r\n            {\r\n                left:2px;\r\n                width:46px;\r\n\r\n            }\r\n\r\n            60%\r\n            {\r\n                left:34px;\r\n                width:14px;\r\n            }\r\n            80%\r\n            {\r\n                left:24px;\r\n                width:24px;\r\n            }\r\n            90%\r\n            {\r\n                left:29px;\r\n                width:19px;\r\n            }\r\n            100%\r\n            {\r\n                left:27px;\r\n                width:21px;\r\n            }\r\n        }\r\n\r\n        @-webkit-keyframes expand-left\r\n        {\r\n            0%\r\n            {\r\n                left:27px;\r\n            }\r\n            30%,50%\r\n            {\r\n                left:2px;\r\n                width:46px;\r\n            }\r\n            60%\r\n            {\r\n                right:34px;\r\n                width:14px;\r\n            }\r\n            80%\r\n            {\r\n                right:24px;\r\n                width:24px;\r\n            }\r\n            90%\r\n            {\r\n                right:29px;\r\n                width:19px;\r\n            }\r\n            100%\r\n            {\r\n                left:2px;\r\n                width:21px;\r\n            }\r\n        }\r\n\r\n        @keyframes expand-left\r\n        {\r\n            0%\r\n            {\r\n                left:27px;\r\n            }\r\n            30%,50%\r\n            {\r\n                left:2px;\r\n                width:46px;\r\n            }\r\n            60%\r\n            {\r\n                right:34px;\r\n                width:14px;\r\n            }\r\n            80%\r\n            {\r\n                right:24px;\r\n                width:24px;\r\n            }\r\n            90%\r\n            {\r\n                right:29px;\r\n                width:19px;\r\n            }\r\n            100%\r\n            {\r\n                left:2px;\r\n                width:21px;\r\n            }\r\n        }\r\n        </style>    `;\r\n\r\n\r\nclass ToggleSwitch extends HTMLElement {\r\n\r\n    static get observedAttributes() {\r\n        return [\"checked\", \"disabled\",\"right-value\",\"left-value\"];\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        var shadowElement = this.attachShadow({\r\n            mode: 'open'\r\n        })\r\n        template.innerHTML = templateHTML;\r\n        shadowElement.appendChild(template.content.cloneNode(true));\r\n        this._jellySwitchDiv = shadowElement.getElementById('toggle-switch');\r\n        this._jellyRightLabel = shadowElement.getElementById('content-right');\r\n        this._jellyLeftLabel = shadowElement.getElementById('content-left');\r\n    }\r\n    connectedCallback() {\r\n        this._upgradeProperty('checked');\r\n        this._upgradeProperty('disabled');\r\n        if (!this.hasAttribute('role')) {\r\n            this.setAttribute('role', 'switch');\r\n        }\r\n        if (!this.hasAttribute('tabindex'))\r\n            this.setAttribute('tabindex', 0);\r\n        if (this._jellySwitchDiv) {\r\n            this._jellySwitchDiv.addEventListener(\"click\", this._handleClickAndToggle.bind(this));\r\n            this.addEventListener('keyup', this._handleKeyPress);\r\n        }\r\n    }\r\n    disconnectedCallback() {\r\n        this._jellySwitchDiv.removeEventListener(\"click\", this._handleClickAndToggle);\r\n        this.removeEventListener('keyup', this._handleKeyPress);\r\n    }\r\n    get checked() {\r\n        return this._jellySwitchDiv.checked;\r\n    }\r\n\r\n    set checked(isChecked) {\r\n\r\n            if (typeof isChecked === \"boolean\") {\r\n\r\n                if (isChecked)\r\n                    this.setAttribute('checked', \"\");\r\n                else\r\n                    this.removeAttribute('checked');\r\n            } else {\r\n                console.warn('checked function of toggle-switch allows only boolean value');\r\n            }\r\n    }\r\n\r\n    get disabled() {\r\n        return this._jellySwitchDiv.disabled;\r\n    }\r\n\r\n    set disabled(isDisabled) {\r\n        if (typeof isDisabled === \"boolean\") {\r\n            this._jellySwitchDiv.disabled = isDisabled;\r\n            if (isDisabled)\r\n                this.setAttribute('disabled', \"\");\r\n            else\r\n                this.removeAttribute('disabled');\r\n        } else {\r\n            console.warn('disabled function of toggle-switch allows only boolean value');\r\n        }\r\n    }\r\n    set rightValue (text){\r\n        this._jellyRightLabel.innerText = text;\r\n    }\r\n    get rightValue()\r\n    {\r\n        return this._jellyRightLabel.innerText;\r\n    }\r\n\r\n    set leftValue (text){\r\n        this._jellyLeftLabel.innerText = text;\r\n    }\r\n\r\n    get leftValue()\r\n    {\r\n        return  this._jellyLeftLabel.innerText = newValue;\r\n    }\r\n\r\n    attributeChangedCallback(name, oldValue, newValue) {\r\n        const hasValue = newValue !== null;\r\n        switch (name) {\r\n            case 'checked':\r\n                this.setAttribute('aria-checked', hasValue);\r\n                this._jellySwitchDiv.checked = hasValue;\r\n                break;\r\n            case 'disabled':\r\n                this.setAttribute('aria-disabled', hasValue);\r\n                this._jellySwitchDiv.disabled = hasValue;\r\n                if (hasValue) {\r\n                    this.removeAttribute('tabindex');\r\n                    this.blur();\r\n                } else {\r\n                    this.setAttribute('tabindex', 0);\r\n                }\r\n                break;\r\n            case 'right-value':\r\n                this.rightValue = newValue;\r\n                break;\r\n            case 'left-value':\r\n                this.leftValue = newValue;\r\n                break;\r\n        }\r\n\r\n    }\r\n    _handleClickAndToggle() {\r\n        if (!this.disabled) {\r\n            this.checked = this._jellySwitchDiv.checked;\r\n            this.dispatchEvent(new CustomEvent(\"toggle\", {\r\n                bubbles: true,\r\n                detail: {\r\n                    value: this.checked\r\n                }\r\n            }));\r\n        }\r\n    }\r\n    _handleKeyPress(event) {\r\n        if (!this.disabled) {\r\n            if (event.altKey)\r\n                return;\r\n\r\n            switch (event.keyCode) {\r\n                case KEYCODE.SPACE:\r\n                    event.preventDefault();\r\n                    this._jellySwitchDiv.checked = !this._jellySwitchDiv.checked;\r\n                    this._handleClickAndToggle();\r\n                    break;\r\n\r\n            }\r\n        } else {\r\n            return;\r\n        }\r\n\r\n    }\r\n    _upgradeProperty(prop) {\r\n        if (this.hasOwnProperty(prop)) {\r\n            let value = this[prop];\r\n            delete this[prop];\r\n            this[prop] = value;\r\n        }\r\n    }\r\n\r\n}\r\nif (window.customElements) {\r\n    customElements.define('toggle-switch', ToggleSwitch);\r\n}\n\n//# sourceURL=webpack://agroforestgrid/./src/components/toggleSwitch.js?");

/***/ }),

/***/ "./src/components/userSettingsDialog.js":
/*!**********************************************!*\
  !*** ./src/components/userSettingsDialog.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UserSettingsDialog: () => (/* binding */ UserSettingsDialog)\n/* harmony export */ });\n/* harmony import */ var _settings_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../settings.js */ \"./src/settings.js\");\n\r\n\r\nconst template = document.createElement('template');\r\ntemplate.innerHTML = `\r\n    <dialog id=\"dialog-settings\">\r\n        <div id=\"dialog-close-x\" class=\"dialog-close-x\">&#10005</div>\r\n        <h3><slot name=\"dialog-title\">Settings</slot></h3>\r\n        <div style=\"max-width: 40em;\">\r\n            <div class=\"form-item\">\r\n                <label for=\"mapsApiKey\">Google Maps API Key:</label> \r\n                <input id=\"mapsApiKey\" type=\"text\" class=\"dialog-textbox\" style=\"width:20em\" placeholder=\"Enter your Google Maps API Key\">\r\n            </div>\r\n        </div>\r\n        <div class=\"dialog-button-container\">\r\n            <button id=\"dialog-button-save\" class=\"dialog-button\">Save</button>\r\n            <button id=\"dialog-button-close\" class=\"dialog-button-secondary\">Cancel</button>\r\n        </div>\r\n    </dialog>\r\n`;\r\n\r\nclass UserSettingsDialog extends HTMLElement {\r\n\r\n    static dialog = null;\r\n    #closeX = null;\r\n    #closeButton = null;\r\n    #saveButton = null;\r\n    #apiKeyTextBox = null;\r\n    #userSettingsStoreKey = \"afm-user-settings\";\r\n    #reload = false;\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    connectedCallback() {\r\n        const shadow = this.attachShadow({ mode: 'open' });\r\n        shadow.appendChild(template.content.cloneNode(true));\r\n\r\n        // get data-stylesheet variable\r\n        const projectStylesheet = this.getAttribute('data-stylesheet');\r\n\r\n        // Add project stylesheets to the shadow dom\r\n        const projectStyles = document.createElement(\"link\");\r\n        projectStyles.setAttribute(\"rel\", \"stylesheet\");\r\n        projectStyles.setAttribute(\"href\", projectStylesheet);\r\n        shadow.appendChild(projectStyles);\r\n\r\n        this.dialog = this.shadowRoot.querySelector('#dialog-settings');\r\n\r\n        this.#apiKeyTextBox = this.shadowRoot.querySelector('#mapsApiKey');\r\n\r\n        this.#closeX = this.shadowRoot.querySelector('#dialog-close-x');\r\n        this.#closeButton = this.shadowRoot.querySelector('#dialog-button-close');\r\n        this.#saveButton = this.shadowRoot.querySelector('#dialog-button-save');\r\n\r\n        this.#setupEventHandlers();\r\n    }\r\n\r\n    #setupEventHandlers = () => {\r\n        this.#apiKeyTextBox.addEventListener('input', (e) => {\r\n            this.#reload = true;\r\n        });\r\n\r\n        this.#closeX.addEventListener(\"click\", (e) => {\r\n            this.dialog.close();\r\n        });\r\n        this.#closeButton.addEventListener(\"click\", (e) => {\r\n            this.dialog.close();\r\n        });\r\n        this.#saveButton.addEventListener(\"click\", (e) => {\r\n            let settings = {\r\n                mapsApiKey: this.#apiKeyTextBox.value,\r\n            }\r\n            this.#saveSettings(settings);\r\n            this.dialog.close();\r\n            if (this.#reload) {\r\n                location.reload();\r\n            }\r\n        });\r\n    };\r\n\r\n    showModal = () => {\r\n        this.dialog.showModal();\r\n        this.#populateSettings();\r\n        this.#closeButton.focus();\r\n    }\r\n\r\n    #defaultUserSettings = {\r\n        mapsApiKey: \"\",\r\n    };\r\n\r\n    #saveSettings = (userSettings) => {\r\n        localStorage.setItem(this.#userSettingsStoreKey, JSON.stringify(userSettings));\r\n    }\r\n\r\n    #getSettings = () => {\r\n        let userSettings = this.#defaultUserSettings;\r\n        if (localStorage.getItem(this.#userSettingsStoreKey))\r\n            userSettings = JSON.parse(localStorage.getItem(this.#userSettingsStoreKey));\r\n        return userSettings;\r\n    }\r\n\r\n    getSetting = (key) => {\r\n        let userSettings = this.#getSettings();\r\n        if (key in userSettings === false && key in this.#defaultUserSettings) {\r\n            this.#updateSetting(key, this.#defaultUserSettings[key]);\r\n            userSettings = this.#getSettings();\r\n        }\r\n        return userSettings[key];\r\n    }\r\n\r\n    #updateSetting = (key, value) => {\r\n        let userSettings = this.#getSettings();\r\n        userSettings[key] = value;\r\n        this.#saveSettings(userSettings);\r\n    }\r\n\r\n    #populateSettings = () => {\r\n        this.#apiKeyTextBox.value = this.getSetting('mapsApiKey');\r\n    }\r\n}\r\n\r\ncustomElements.define('user-settings-dialog', UserSettingsDialog);\n\n//# sourceURL=webpack://agroforestgrid/./src/components/userSettingsDialog.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   initMap: () => (/* binding */ initMap)\n/* harmony export */ });\n/* harmony import */ var _settings_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./settings.js */ \"./src/settings.js\");\n/* harmony import */ var _js_dataAccessContext_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./js/dataAccessContext.js */ \"./src/js/dataAccessContext.js\");\n/* harmony import */ var _js_mapGrid_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./js/mapGrid.js */ \"./src/js/mapGrid.js\");\n/* harmony import */ var _js_mapPolygons_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./js/mapPolygons.js */ \"./src/js/mapPolygons.js\");\n/* harmony import */ var _js_mapTrees_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./js/mapTrees.js */ \"./src/js/mapTrees.js\");\n/* harmony import */ var _js_mapGeoLocation_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./js/mapGeoLocation.js */ \"./src/js/mapGeoLocation.js\");\n/* harmony import */ var _components_iconButton_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./components/iconButton.js */ \"./src/components/iconButton.js\");\n/* harmony import */ var _components_iconButton_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_components_iconButton_js__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _components_projectBar_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./components/projectBar.js */ \"./src/components/projectBar.js\");\n/* harmony import */ var _components_informationDialog_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./components/informationDialog.js */ \"./src/components/informationDialog.js\");\n/* harmony import */ var _components_informationDialog_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_components_informationDialog_js__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var _components_userSettingsDialog_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./components/userSettingsDialog.js */ \"./src/components/userSettingsDialog.js\");\n/* harmony import */ var _components_exportImportDialog_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./components/exportImportDialog.js */ \"./src/components/exportImportDialog.js\");\n/* harmony import */ var _components_projectDialog_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./components/projectDialog.js */ \"./src/components/projectDialog.js\");\n/* harmony import */ var _css_agroforestgrid_css__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @css/agroforestgrid.css */ \"./src/css/agroforestgrid.css\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nlet locationMarker = null;\r\nlet project;\r\nlet segment;\r\nlet projectContext = {\r\n    map: null,\r\n    projectKey: \"\",\r\n    segmentKey: \"\",\r\n    segmentSettings: null\r\n}\r\nlet startingLat = _settings_js__WEBPACK_IMPORTED_MODULE_0__.startingLat;\r\nlet startingLng = _settings_js__WEBPACK_IMPORTED_MODULE_0__.startingLng;\r\nlet startingZoom = _settings_js__WEBPACK_IMPORTED_MODULE_0__.startingZoom;\r\nlet startingHeading = 0;\r\nlet startingTilt = 0;\r\n\r\nlet curLat = startingLat;\r\nlet curLng = startingLng;\r\nlet curZoom = startingZoom;\r\nlet curHeading = startingHeading;\r\nlet curTilt = startingTilt;\r\n\r\nconst dataAccess = _js_dataAccessContext_js__WEBPACK_IMPORTED_MODULE_1__.create(_settings_js__WEBPACK_IMPORTED_MODULE_0__.dataStoreType);\r\n\r\nconst projectBarComponent = document.getElementById(\"project-bar\");\r\nconst informationDialogComponent = document.getElementById(\"information-dialog\");\r\nconst settingsDialogComponent = document.getElementById(\"user-settings-dialog\");\r\nconst exportImportDialogComponent = document.getElementById(\"export-import-dialog\");\r\nconst mapTreeDetails = document.getElementById(\"map-tree-details\");\r\n\r\nlet drawingManager;\r\nlet polygonType = \"boundary\";\r\n\r\nconst setupApp = () => {\r\n    const apiKey = settingsDialogComponent.getSetting('mapsApiKey');\r\n\r\n    var script = document.createElement('script');\r\n    script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&loading=async&callback=initMap&libraries=drawing,geometry,places,marker`;\r\n    script.async = true;\r\n    script.defer = true;\r\n    document.head.appendChild(script);\r\n\r\n    window.addEventListener('location-action', (e) => locationMarkerSet(e.detail.enabled));\r\n    window.addEventListener('project-changed', (e) => projectChanged(e.detail.projectKey));\r\n    window.addEventListener('project-updated', (e) => projectUpdated(e.detail.projectKey));\r\n    window.addEventListener('segment-changed', (e) => segmentChanged(e.detail.projectKey, e.detail.segmentKey));\r\n    window.addEventListener('segment-updated', (e) => segmentUpdated());\r\n    window.addEventListener('polygon-type-changed', (e) => polygonTypeChanged(e.detail.polygonType));\r\n\r\n    setupProject(true);\r\n}\r\n\r\nconst setupProject = (initial) => {\r\n\r\n    locationMarkerSet(false);\r\n\r\n    getQueryStringValues();\r\n\r\n    if (projectContext.projectKey === \"\" || !dataAccess.projectExists(projectContext.projectKey)) {\r\n        return false;\r\n    }\r\n\r\n    project = dataAccess.projectGet(projectContext.projectKey);\r\n\r\n    // TEMP: migrate project to support multiple polygons\r\n    mmigrateToPolygons(project);\r\n\r\n    const segmentIndex = project.segments.findIndex(s => s.segmentKey === projectContext.segmentKey);\r\n    segment = (segmentIndex !== -1) ? project.segments[segmentIndex] : project.segments[0];\r\n\r\n    const polygonBoundaryVisible = segment.polygons && segment.polygons.filter(p => p.type == 'boundary').length > 0 ? segment.polygons.filter(p => p.type == 'boundary')[0].visible : true;\r\n    const polygonsTreeGroupVisible = segment.polygons && segment.polygons.filter(p => p.type == 'treeGroup').length > 0 ? segment.polygons.filter(p => p.type == 'treeGroup')[0].visible : true;\r\n\r\n    if (segment) {\r\n        projectContext.segmentKey = segment.segmentKey;\r\n        projectContext.segmentSettings = {\r\n            mapGridWidth: segment.grid.width,\r\n            mapGridHeight: segment.grid.height,\r\n            mapGridVisible: segment.grid.visible,\r\n            polygonBoundaryVisible: polygonBoundaryVisible,\r\n            polygonsTreeGroupVisible: polygonsTreeGroupVisible,\r\n            treeDiameter: segment.trees.diameter,\r\n            treesVisible: segment.trees.visible\r\n        };\r\n\r\n        updateQueryString(\r\n            projectContext.projectKey,\r\n            projectContext.segmentKey,\r\n            segment.map.lat,\r\n            segment.map.lng,\r\n            segment.map.zoom,\r\n            segment.map.heading,\r\n            segment.map.tilt);\r\n\r\n        getQueryStringValues();\r\n\r\n        if (initial)\r\n            dataAccess.segmentStateInitialize(segment);\r\n\r\n        polygonTypeChanged('boundary');\r\n        projectBarComponent.setup(projectContext, project);\r\n    }\r\n}\r\n\r\n// TEMP: migrate project to support multiple polygons\r\nconst mmigrateToPolygons = (project) => {\r\n    project.segments.forEach(segment => {\r\n        if ('polygon' in segment) {\r\n            segment.polygon.id = dataAccess.createNewId();\r\n            segment.polygon.type = \"boundary\";\r\n\r\n            segment.polygons = [segment.polygon];\r\n            delete segment.polygon;\r\n\r\n            dataAccess.segmentUpdate(project.projectKey, segment.segmentKey, segment, false);\r\n        }\r\n    });\r\n}\r\n\r\nconst restoreArtefacts = () => {\r\n    if (project && projectContext.projectKey !== \"\") {\r\n        _js_mapGrid_js__WEBPACK_IMPORTED_MODULE_2__.restoreGrid(projectContext);\r\n        _js_mapPolygons_js__WEBPACK_IMPORTED_MODULE_3__.restorePolygons(projectContext);\r\n        _js_mapTrees_js__WEBPACK_IMPORTED_MODULE_4__.restoreTrees(projectContext);\r\n\r\n        const segmentsInactive = project.segments.filter(s => s.segmentKey !== projectContext.segmentKey);\r\n        _js_mapGrid_js__WEBPACK_IMPORTED_MODULE_2__.restoreGridInactive(projectContext, segmentsInactive);\r\n        _js_mapPolygons_js__WEBPACK_IMPORTED_MODULE_3__.restorePolygonsInactive(projectContext, segmentsInactive);\r\n        _js_mapTrees_js__WEBPACK_IMPORTED_MODULE_4__.restoreTreesInactive(projectContext, segmentsInactive);\r\n    }\r\n}\r\n\r\nconst locationMarkerSet = (enabled) => {\r\n    _js_mapGeoLocation_js__WEBPACK_IMPORTED_MODULE_5__.locationMarkerHide(locationMarker);\r\n    if (enabled) {\r\n        _js_mapGeoLocation_js__WEBPACK_IMPORTED_MODULE_5__.locationMarkerShow(projectContext.map, locationMarkerSetCallback);\r\n    }\r\n}\r\nconst locationMarkerSetCallback = (marker) => {\r\n    locationMarker = marker;\r\n}\r\n\r\nconst projectChanged = (projectKey) => {\r\n    updateQueryString(projectKey);\r\n    setupProject(true);\r\n    setMap();\r\n}\r\n\r\nconst projectUpdated = (projectKey) => {\r\n    setupProject(true);\r\n    setMap();\r\n}\r\n\r\nconst segmentChanged = (projectKey, segmentKey) => {\r\n    updateQueryString(projectKey, segmentKey);\r\n    setupProject(true);\r\n    setMap();\r\n}\r\n\r\nconst segmentUpdated = () => {\r\n    setupProject(false);\r\n    setMap();\r\n}\r\n\r\nconst polygonTypeChanged = (updatedPolygonType) => {\r\n    polygonType = updatedPolygonType;\r\n    if (drawingManager != null) {\r\n        drawingManager.polygonOptions = (polygonType == \"boundary\") ? _js_mapPolygons_js__WEBPACK_IMPORTED_MODULE_3__.polygonBoundaryOptions : _js_mapPolygons_js__WEBPACK_IMPORTED_MODULE_3__.polygonTreeGroupOptions;\r\n    }\r\n}\r\n\r\nasync function initMap() {\r\n\r\n    const position = { lat: curLat, lng: curLng };\r\n\r\n    var mapOptions = {\r\n        center: position,\r\n        zoom: curZoom,\r\n        heading: curHeading,\r\n        tilt: curTilt,\r\n        mapTypeId: 'satellite',\r\n        mapTypeControl: false,\r\n        fullscreenControl: false,\r\n        disableDoubleClickZoom: true,\r\n        mapId: \"90f87356969d889c\",\r\n    };\r\n\r\n    const map = new google.maps.Map(document.getElementById(\"map\"), mapOptions);\r\n\r\n    // Location Search Box\r\n    const locationSearchInput = document.getElementById('location-search-box');\r\n    const searchBox = new google.maps.places.SearchBox(locationSearchInput);\r\n\r\n    // Tree count\r\n    map.controls[google.maps.ControlPosition.TOP_LEFT].push(mapTreeDetails);\r\n\r\n    searchBox.addListener('places_changed', () => {\r\n        const places = searchBox.getPlaces();\r\n        if (places.length == 0) {\r\n            return;\r\n        }\r\n        const bounds = new google.maps.LatLngBounds();\r\n        places.forEach(place => {\r\n            if (!place.geometry) {\r\n                return;\r\n            }\r\n            if (place.geometry.viewport) {\r\n                bounds.union(place.geometry.viewport);\r\n            } else {\r\n                bounds.extend(place.geometry.location);\r\n            }\r\n        });\r\n        map.fitBounds(bounds);\r\n    });\r\n\r\n    google.maps.event.addListener(map, 'bounds_changed', function () {\r\n        const center = map.getCenter();\r\n        const lat = center.lat().toFixed(6);\r\n        const lng = center.lng().toFixed(6);\r\n        const zoom = map.getZoom();\r\n        const heading = map.getHeading();\r\n        const tilt = map.getTilt();\r\n        updateQueryString(projectContext.projectKey, projectContext.segmentKey, lat, lng, zoom, heading, tilt);\r\n        getQueryStringValues();\r\n        \r\n        searchBox.setBounds(map.getBounds());\r\n    });\r\n\r\n    google.maps.event.addListenerOnce(map, 'idle', () => {\r\n        restoreArtefacts();\r\n    });\r\n\r\n    drawingManager = new google.maps.drawing.DrawingManager({\r\n        drawingMode: google.maps.drawing.OverlayType.POLYGON,\r\n        drawingControl: true,\r\n        drawingControlOptions: {\r\n            position: google.maps.ControlPosition.RIGHT_TOP,\r\n            drawingModes: [\r\n                google.maps.drawing.OverlayType.POLYGON,\r\n                google.maps.drawing.OverlayType.CIRCLE,\r\n            ],\r\n        },\r\n        polygonOptions: _js_mapPolygons_js__WEBPACK_IMPORTED_MODULE_3__.polygonBoundaryOptions,\r\n        circleOptions: _js_mapTrees_js__WEBPACK_IMPORTED_MODULE_4__.treeCircleOptions\r\n    });\r\n    drawingManager.setMap(map);\r\n\r\n    google.maps.event.addListener(drawingManager, 'overlaycomplete', (event) => {\r\n        if (event.type === google.maps.drawing.OverlayType.POLYGON) {\r\n            _js_mapPolygons_js__WEBPACK_IMPORTED_MODULE_3__.capturePolygon(event, projectContext, polygonType);\r\n        }\r\n        if (event.type === google.maps.drawing.OverlayType.CIRCLE) {\r\n            _js_mapTrees_js__WEBPACK_IMPORTED_MODULE_4__.captureTreeCircle(event, projectContext);\r\n        }\r\n    });\r\n\r\n    setupMapAdjustButtons(map);\r\n\r\n    projectContext.map = map;\r\n}\r\n\r\nconst setMap = () => {\r\n    const center = { lat: curLat, lng: curLng }\r\n    projectContext.map.setCenter(center);\r\n    projectContext.map.setZoom(curZoom);\r\n    projectContext.map.setHeading(curHeading);\r\n    projectContext.map.setTilt(curTilt);\r\n    restoreArtefacts();\r\n}\r\n\r\nconst setupMapAdjustButtons = (map) => {\r\n    const buttons = [\r\n        [\"Rotate Left\", \"rotate\", 2, google.maps.ControlPosition.LEFT_CENTER, \"map-button map-button-left\"],\r\n        [\"Rotate Right\", \"rotate\", -2, google.maps.ControlPosition.RIGHT_CENTER, \"map-button map-button-right\"],\r\n        [\"Tilt Down\", \"tilt\", 10, google.maps.ControlPosition.TOP_CENTER, \"map-button\"],\r\n        [\"Tilt Up\", \"tilt\", -10, google.maps.ControlPosition.BOTTOM_CENTER, \"map-button\"],\r\n    ];\r\n\r\n    buttons.forEach(([text, mode, amount, position, classList]) => {\r\n        const controlDiv = document.createElement(\"div\");\r\n        const controlUI = document.createElement(\"button\");\r\n\r\n        controlUI.classList = classList;\r\n        controlUI.innerText = `${text}`;\r\n        controlUI.addEventListener(\"click\", () => {\r\n            adjustMap(map, mode, amount);\r\n        });\r\n        controlDiv.appendChild(controlUI);\r\n        map.controls[position].push(controlDiv);\r\n    });\r\n}\r\n\r\nconst adjustMap = function (map, mode, amount) {\r\n    // https://developers.google.com/maps/documentation/javascript/webgl/tilt-rotation\r\n    switch (mode) {\r\n        case \"tilt\":\r\n            const newTilt = map.getTilt() + amount;\r\n            map.setTilt(newTilt);\r\n            break;\r\n        case \"rotate\":\r\n            const newHeading = map.getHeading() + amount;\r\n            map.setHeading(newHeading);\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n};\r\n\r\nconst getQueryStringValues = () => {\r\n    const querystringParameters = new URLSearchParams(window.location.search);\r\n    if (querystringParameters !== null && querystringParameters?.size > 0) {\r\n        projectContext.projectKey = querystringParameters.get('projectKey');\r\n        projectContext.segmentKey = querystringParameters.get('segmentKey');\r\n        curLat = querystringParameters.get('lat') && querystringParameters.get('lat') !== 'undefined' ? parseFloat(querystringParameters.get('lat')) : startingLat;\r\n        curLng = querystringParameters.get('lng') && querystringParameters.get('lng') !== 'undefined' ? parseFloat(querystringParameters.get('lng')) : startingLng;\r\n        curZoom = querystringParameters.get('zoom') && querystringParameters.get('zoom') !== 'undefined' ? parseFloat(querystringParameters.get('zoom')) : startingZoom;\r\n        curHeading = querystringParameters.get('heading') && querystringParameters.get('heading') !== 'undefined' ? parseInt(querystringParameters.get('heading')) : startingHeading;\r\n        curTilt = querystringParameters.get('tilt') && querystringParameters.get('tilt') !== 'undefined' ? parseInt(querystringParameters.get('tilt')) : startingTilt;\r\n    }\r\n}\r\n\r\nconst updateQueryString = (projectKey, segmentKey, lat, lng, zoom, heading, tilt) => {\r\n    var newUrl = window.location.protocol\r\n        + \"//\"\r\n        + window.location.host\r\n        + window.location.pathname\r\n        + '?projectKey=' + projectKey\r\n        + '&segmentKey=' + segmentKey\r\n        + '&lat=' + lat\r\n        + '&lng=' + lng\r\n        + '&zoom=' + zoom\r\n        + '&heading=' + heading\r\n        + '&tilt=' + tilt;\r\n    window.history.replaceState({ path: newUrl }, '', newUrl);\r\n}\r\n\r\ndocument.getElementById(\"icon-button-information\").addEventListener(\"click\", (e) => {\r\n    informationDialogComponent.showModal();\r\n});\r\n\r\ndocument.getElementById(\"icon-button-download\").addEventListener(\"click\", (e) => {\r\n    exportImportDialogComponent.showModal(projectContext.projectKey);\r\n});\r\n\r\ndocument.getElementById(\"icon-button-settings\").addEventListener(\"click\", function (e) {\r\n    settingsDialogComponent.showModal();\r\n});\r\n\r\nwindow.onload = () => {\r\n    setupApp();\r\n};\r\n\r\nwindow.initMap = initMap;\n\n//# sourceURL=webpack://agroforestgrid/./src/index.js?");

/***/ }),

/***/ "./src/js/dataAccessApi.js":
/*!*********************************!*\
  !*** ./src/js/dataAccessApi.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _settings_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../settings.js */ \"./src/settings.js\");\n\r\n\r\n// TODO\n\n//# sourceURL=webpack://agroforestgrid/./src/js/dataAccessApi.js?");

/***/ }),

/***/ "./src/js/dataAccessContext.js":
/*!*************************************!*\
  !*** ./src/js/dataAccessContext.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   create: () => (/* binding */ create)\n/* harmony export */ });\n/* harmony import */ var _dataAccessApi_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dataAccessApi.js */ \"./src/js/dataAccessApi.js\");\n/* harmony import */ var _dataAccessLocal_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dataAccessLocal.js */ \"./src/js/dataAccessLocal.js\");\n\r\n\r\n\r\n// Strategy pattern for data access\r\nconst componentMap = {\r\n    dataAccessApi: _dataAccessApi_js__WEBPACK_IMPORTED_MODULE_0__,\r\n    dataAccessLocal: _dataAccessLocal_js__WEBPACK_IMPORTED_MODULE_1__\r\n};\r\n\r\n// Get a component based on a key, from a settings file\r\nconst create = (componentKey) => {\r\n    const Component = componentMap[componentKey];\r\n    if (Component) {\r\n        return Component;\r\n    } else {\r\n        throw new Error('Component not found');\r\n    }\r\n}\r\n\r\n\n\n//# sourceURL=webpack://agroforestgrid/./src/js/dataAccessContext.js?");

/***/ }),

/***/ "./src/js/dataAccessLocal.js":
/*!***********************************!*\
  !*** ./src/js/dataAccessLocal.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createNewId: () => (/* binding */ createNewId),\n/* harmony export */   gridGet: () => (/* binding */ gridGet),\n/* harmony export */   gridUpdate: () => (/* binding */ gridUpdate),\n/* harmony export */   polygonsGet: () => (/* binding */ polygonsGet),\n/* harmony export */   polygonsUpdate: () => (/* binding */ polygonsUpdate),\n/* harmony export */   projectCreate: () => (/* binding */ projectCreate),\n/* harmony export */   projectDelete: () => (/* binding */ projectDelete),\n/* harmony export */   projectExists: () => (/* binding */ projectExists),\n/* harmony export */   projectGet: () => (/* binding */ projectGet),\n/* harmony export */   projectListGet: () => (/* binding */ projectListGet),\n/* harmony export */   projectUpdate: () => (/* binding */ projectUpdate),\n/* harmony export */   segmentCreate: () => (/* binding */ segmentCreate),\n/* harmony export */   segmentDelete: () => (/* binding */ segmentDelete),\n/* harmony export */   segmentGet: () => (/* binding */ segmentGet),\n/* harmony export */   segmentStateInitialize: () => (/* binding */ segmentStateInitialize),\n/* harmony export */   segmentStateRedo: () => (/* binding */ segmentStateRedo),\n/* harmony export */   segmentStateUndo: () => (/* binding */ segmentStateUndo),\n/* harmony export */   segmentUpdate: () => (/* binding */ segmentUpdate),\n/* harmony export */   treesGet: () => (/* binding */ treesGet),\n/* harmony export */   treesUpdate: () => (/* binding */ treesUpdate)\n/* harmony export */ });\n/* harmony import */ var _settings_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../settings.js */ \"./src/settings.js\");\n/* harmony import */ var _dataMemento_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dataMemento.js */ \"./src/js/dataMemento.js\");\n\r\n\r\n\r\nconst storageKeyPrefix = \"afm-project-\";\r\n\r\nconst createNewId = () => {\r\n    // create a GUID/UUID v4\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'\r\n        .replace(/[xy]/g, function (c) {\r\n            const r = Math.random() * 16 | 0,\r\n                v = c == 'x' ? r : (r & 0x3 | 0x8);\r\n            return v.toString(16);\r\n        });\r\n}\r\n\r\nconst projectListGet = () => {\r\n    const projectList = localStorage.getItem(storageKeyPrefix + 'list');\r\n    return projectList ? JSON.parse(projectList) : [];\r\n}\r\n\r\nconst projectListAdd = (projectKey, projectName) => {\r\n    const projectList = projectListGet();\r\n\r\n    if (projectList.some((p) => p.projectName === projectName)) {\r\n        const err = `A project called ${projectName} already exists!`;\r\n        window.alert(err);\r\n        return false;\r\n    }\r\n\r\n    const projectListItem = {\r\n        projectKey: projectKey,\r\n        projectName: projectName\r\n    };\r\n    projectList.push(projectListItem);\r\n    const sortedProjectList = projectList.sort((a, b) => a.projectName.localeCompare(b.projectName))\r\n\r\n    localStorage.setItem(storageKeyPrefix + 'list', JSON.stringify(sortedProjectList));\r\n\r\n    return true;\r\n}\r\n\r\nconst projectListUpdate = (projectKey, projectName) => {\r\n    const projectList = projectListGet();\r\n    \r\n    const index = projectList.findIndex(item => item.projectKey === projectKey);\r\n    \r\n    if (index !== -1) {\r\n        projectList[index].projectName = projectName;\r\n        \r\n        const sortedProjectList = projectList.sort((a, b) => a.projectName.localeCompare(b.projectName))\r\n        \r\n        localStorage.setItem(storageKeyPrefix + 'list', JSON.stringify(sortedProjectList));\r\n    } else {\r\n        projectListAdd(projectKey, projectName);\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nconst projectListDelete = (projectKey) => {    \r\n    const projectList = projectListGet();\r\n    \r\n    const newProjectList = projectList.filter(item => item.projectKey !== projectKey);\r\n    \r\n    localStorage.setItem(storageKeyPrefix + 'list', JSON.stringify(newProjectList));\r\n\r\n    return true;\r\n}\r\n\r\n\r\nconst projectExists = (projectKey) => {\r\n    return ((localStorage.getItem(storageKeyPrefix + projectKey) === null) ? false : true);\r\n}\r\n\r\nconst projectGet = (projectKey) => {\r\n    const project = localStorage.getItem(storageKeyPrefix + projectKey);\r\n    return project ? JSON.parse(project) : null;\r\n};\r\n\r\nconst projectSave = (project) => {\r\n    localStorage.setItem(storageKeyPrefix + project.projectKey, JSON.stringify(project));\r\n};\r\n\r\nconst projectCreate = (projectName, projectCreate) => {\r\n    const projectKey = createNewId();\r\n\r\n    if (projectListAdd(projectKey, projectName)) {\r\n\r\n        const project = {\r\n            projectKey: projectKey,\r\n            projectName: projectName,\r\n            projectNotes: projectCreate,\r\n            createdTimestamp: new Date().toISOString(),\r\n            segments: []\r\n        }\r\n\r\n        projectSave(project);\r\n\r\n        return project;\r\n    }\r\n    return null;\r\n};\r\n\r\nconst projectUpdate = (project) => {\r\n    projectSave(project);\r\n    projectListUpdate(project.projectKey, project.projectName)\r\n};\r\n\r\nconst projectDelete = (projectKey) => {\r\n    localStorage.removeItem(storageKeyPrefix + projectKey);\r\n    projectListDelete(projectKey);\r\n};\r\n\r\n\r\n// Undo/Redo Segment State\r\nconst { Originator, Caretaker } = (0,_dataMemento_js__WEBPACK_IMPORTED_MODULE_1__.dataMemento)();\r\nconst originator = new Originator();\r\nconst caretaker = new Caretaker();\r\n\r\nconst segmentStateInitialize = (state) => {\r\n    caretaker.reset();\r\n    segmentStateChange(state);\r\n}\r\n\r\nconst segmentStateChange = (newState) => {\r\n    originator.setState(newState);\r\n    caretaker.addMemento(originator.createMemento());\r\n}\r\n\r\nconst segmentStateUndo = (projectKey) => {\r\n    const memento = caretaker.undo();\r\n    if (memento) {\r\n        originator.restoreMemento(memento);\r\n    }\r\n    const segment = originator.getState();\r\n    segmentUpdate(projectKey, segment.segmentKey, segment, false);\r\n}\r\n\r\nconst segmentStateRedo = (projectKey) => {\r\n    const memento = caretaker.redo();\r\n    if (memento) {\r\n        originator.restoreMemento(memento);\r\n    }\r\n    const segment = originator.getState();\r\n    segmentUpdate(projectKey, segment.segmentKey, segment, false);\r\n}\r\n\r\n\r\nconst segmentGet = (projectKey, segmentKey) => {\r\n    const project = projectGet(projectKey);\r\n    if (project) {\r\n        const index = project.segments.findIndex(seg => seg.segmentKey === segmentKey);\r\n        if (index !== -1) {\r\n            return project.segments[index];\r\n        }\r\n    }\r\n}\r\n\r\nconst segmentCreate = (projectKey, segmentName, mapDetails) => {\r\n    const segment = {\r\n        segmentKey: createNewId(),\r\n        segmentName: segmentName,\r\n        segmentNotes: \"\",        \r\n        createdTimestamp: new Date().toISOString(),\r\n        map: mapDetails,\r\n        grid: {\r\n            paths: null,\r\n            height: _settings_js__WEBPACK_IMPORTED_MODULE_0__.defaultGridHeightMeters,\r\n            width: _settings_js__WEBPACK_IMPORTED_MODULE_0__.defaultGridWidthMeters,\r\n            visible: true\r\n        },\r\n        polygons: null,\r\n        trees: {\r\n            points: null,\r\n            diameter: _settings_js__WEBPACK_IMPORTED_MODULE_0__.defaultTreeDiameterMeters,\r\n            visible: true\r\n        }\r\n    };\r\n\r\n    const project = projectGet(projectKey);\r\n    if (project) {\r\n        project.segments.push(segment);\r\n        projectSave(project);\r\n    }\r\n\r\n    return segment;\r\n};\r\n\r\nconst segmentUpdate = (projectKey, segmentKey, updatedSegment, allowUndo) => {\r\n    const project = projectGet(projectKey);\r\n    if (project) {\r\n        const index = project.segments.findIndex(seg => seg.segmentKey === segmentKey);\r\n        if (index !== -1) {\r\n            project.segments[index] = updatedSegment;\r\n            projectSave(project);\r\n            if (allowUndo) segmentStateChange(updatedSegment);\r\n        }\r\n    }\r\n};\r\n\r\nconst segmentDelete = (projectKey, segmentKey) => {\r\n    const project = projectGet(projectKey);\r\n    if (project) {\r\n        project.segments = project.segments.filter(seg => seg.segmentKey !== segmentKey);\r\n        projectSave(project);\r\n    }\r\n};\r\n\r\n\r\nconst gridGet = (projectKey, segmentKey) => {\r\n    const segment = segmentGet(projectKey, segmentKey);\r\n    if (segment) {\r\n        return segment.grid;\r\n    }\r\n};\r\n\r\nconst gridUpdate = (projectKey, segmentKey, grid) => {\r\n    const project = projectGet(projectKey);\r\n    if (project) {\r\n        const segment = project.segments.find(seg => seg.segmentKey === segmentKey);\r\n        if (segment) {\r\n            segment.grid = grid;\r\n            segmentStateChange(segment);\r\n            projectSave(project);\r\n        }\r\n    }\r\n};\r\n\r\n\r\nconst polygonsGet = (projectKey, segmentKey) => {\r\n    const segment = segmentGet(projectKey, segmentKey);\r\n    if (segment) {\r\n        return segment.polygons;\r\n    }\r\n};\r\n\r\nconst polygonsUpdate = (projectKey, segmentKey, polygons) => {\r\n    const project = projectGet(projectKey);\r\n    if (project) {\r\n        const segment = project.segments.find(seg => seg.segmentKey === segmentKey);\r\n        if (segment) {\r\n            segment.polygons = polygons;\r\n            segmentStateChange(segment);\r\n            projectSave(project);\r\n        }\r\n    }\r\n};\r\n\r\n\r\nconst treesGet = (projectKey, segmentKey) => {\r\n    const segment = segmentGet(projectKey, segmentKey);\r\n    if (segment) {\r\n        return segment.trees;\r\n    }\r\n};\r\n\r\nconst treesUpdate = (projectKey, segmentKey, trees) => {\r\n    const project = projectGet(projectKey);\r\n    if (project) {\r\n        const segment = project.segments.find(seg => seg.segmentKey === segmentKey);\r\n        if (segment) {\r\n            segment.trees = trees;\r\n            segmentStateChange(segment);\r\n            projectSave(project);\r\n        }\r\n    }\r\n};\r\n\r\n\r\n \n\n//# sourceURL=webpack://agroforestgrid/./src/js/dataAccessLocal.js?");

/***/ }),

/***/ "./src/js/dataExport.js":
/*!******************************!*\
  !*** ./src/js/dataExport.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   downloadProject: () => (/* binding */ downloadProject)\n/* harmony export */ });\n/* harmony import */ var _settings_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../settings.js */ \"./src/settings.js\");\n/* harmony import */ var _dataAccessContext_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dataAccessContext.js */ \"./src/js/dataAccessContext.js\");\n\r\n\r\n\r\nconst dataAccess = _dataAccessContext_js__WEBPACK_IMPORTED_MODULE_1__.create(_settings_js__WEBPACK_IMPORTED_MODULE_0__.dataStoreType);\r\n\r\nconst downloadProject = (projectKey) => {\r\n    let project = dataAccess.projectGet(projectKey);\r\n    const timestamp = new Date().toISOString();\r\n    let data = {\r\n        \"project\": project,\r\n        \"timestamp\": timestamp\r\n    };\r\n    const fileName = project.projectName + '-' + timestamp + \".json\";\r\n\r\n    downloadTextFile(JSON.stringify(data, null, 4), fileName);\r\n}\r\n\r\nconst downloadTextFile = (text, name) => {\r\n    const a = document.createElement('a');\r\n    const type = name.split(\".\").pop();\r\n    a.href = URL.createObjectURL(new Blob([text], { type: `text/${type === \"txt\" ? \"plain\" : type}` }));\r\n    a.download = name;\r\n    a.click();\r\n    a.remove();\r\n}\r\n\r\n\n\n//# sourceURL=webpack://agroforestgrid/./src/js/dataExport.js?");

/***/ }),

/***/ "./src/js/dataMemento.js":
/*!*******************************!*\
  !*** ./src/js/dataMemento.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   dataMemento: () => (/* binding */ dataMemento)\n/* harmony export */ });\n// Memento Pattern for undo/redo\r\nconst dataMemento = (() => {\r\n\r\n    class Memento {\r\n        constructor(state) {\r\n            this.state = JSON.parse(JSON.stringify(state));\r\n        }\r\n\r\n        getState() {\r\n            return this.state;\r\n        }\r\n    }\r\n\r\n    class Originator {\r\n        constructor() {\r\n            this.state = {};\r\n        }\r\n\r\n        setState(newState) {\r\n            this.state = { ...newState };\r\n        }\r\n\r\n        getState() {\r\n            return this.state;\r\n        }\r\n\r\n        createMemento() {\r\n            return new Memento(this.getState());\r\n        }\r\n\r\n        restoreMemento(memento) {\r\n            this.setState(memento.getState());\r\n        }\r\n        \r\n        clearState() {\r\n            this.state = {};\r\n        }\r\n    }\r\n\r\n    class Caretaker {\r\n        constructor() {\r\n            this.mementos = [];\r\n            this.currentIndex = -1;\r\n        }\r\n\r\n        addMemento(memento) {\r\n            this.mementos.splice(this.currentIndex + 1);\r\n            this.mementos.push(memento);\r\n            this.currentIndex++;\r\n        }\r\n\r\n        undo() {\r\n            if (this.currentIndex > 0) {\r\n                this.currentIndex--;\r\n                return this.mementos[this.currentIndex];\r\n            }\r\n            return null;\r\n        }\r\n\r\n        redo() {\r\n            if (this.currentIndex < this.mementos.length - 1) {\r\n                this.currentIndex++;\r\n                return this.mementos[this.currentIndex];\r\n            }\r\n            return null;\r\n        }\r\n\r\n        reset() {\r\n            this.mementos = [];\r\n            this.currentIndex = -1;\r\n        }\r\n    }\r\n\r\n    return {\r\n        Originator,\r\n        Caretaker\r\n    };\r\n});\r\n\r\n \r\n\n\n//# sourceURL=webpack://agroforestgrid/./src/js/dataMemento.js?");

/***/ }),

/***/ "./src/js/mapGeoLocation.js":
/*!**********************************!*\
  !*** ./src/js/mapGeoLocation.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   locationMarkerHide: () => (/* binding */ locationMarkerHide),\n/* harmony export */   locationMarkerShow: () => (/* binding */ locationMarkerShow)\n/* harmony export */ });\n/* harmony import */ var _settings_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../settings.js */ \"./src/settings.js\");\n\r\n\r\nconst locationMarkerShow = (map, locationMarkerSetCallback) => {\r\n    if (navigator.geolocation) {\r\n        const options = {\r\n            enableHighAccuracy: true,\r\n            timeout: 5000,\r\n            maximumAge: 0\r\n        };\r\n\r\n        navigator.geolocation.getCurrentPosition(\r\n            (position) => {\r\n                const pos = {\r\n                    lat: position.coords.latitude,\r\n                    lng: position.coords.longitude\r\n                };\r\n                const marker = locationMarkerCreate(map, pos);\r\n                locationMarkerSetCallback(marker);\r\n            },\r\n            (error) => {\r\n                handleLocationError(true, map.getCenter(), error);\r\n            },\r\n            options\r\n        );\r\n    } else {\r\n        handleLocationError(false, map.getCenter());\r\n    }\r\n}\r\n\r\nconst locationMarkerHide = (marker) => {\r\n    if (marker != null)\r\n        marker.setMap(null);\r\n}\r\n\r\nconst locationMarkerCreate = (map, position) => {\r\n    map.setCenter(position);\r\n    map.setZoom(18);\r\n\r\n    const pinBackground = new google.maps.marker.PinElement({\r\n        background: \"#e1802e\",\r\n        borderColor: \"white\",\r\n        glyphColor: \"white\",\r\n    });\r\n\r\n    return new google.maps.marker.AdvancedMarkerElement({\r\n        position: position,\r\n        map: map,\r\n        title: \"Your Location\",\r\n        content: pinBackground.element\r\n    });\r\n}\r\n\r\nconst handleLocationError = (browserHasGeolocation, pos, error) => {\r\n    let errorMessage;\r\n    if (browserHasGeolocation) {\r\n        switch (error.code) {\r\n            case error.TIMEOUT:\r\n                errorMessage = \"The request to get user location timed out.\";\r\n                break;\r\n            case error.POSITION_UNAVAILABLE:\r\n                errorMessage = \"Location information is unavailable.\";\r\n                break;\r\n            case error.PERMISSION_DENIED:\r\n                errorMessage = \"Permission to share location information was denied.\";\r\n                break;\r\n            default:\r\n                errorMessage = \"An unknown error occurred.\";\r\n        }\r\n    } else {\r\n        errorMessage = \"Error: Your browser doesn't support geolocation.\";\r\n    }\r\n    console.error(errorMessage);\r\n    window.alert(errorMessage);\r\n}\r\n\r\n\n\n//# sourceURL=webpack://agroforestgrid/./src/js/mapGeoLocation.js?");

/***/ }),

/***/ "./src/js/mapGrid.js":
/*!***************************!*\
  !*** ./src/js/mapGrid.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   deleteGrid: () => (/* binding */ deleteGrid),\n/* harmony export */   drawGrid: () => (/* binding */ drawGrid),\n/* harmony export */   restoreGrid: () => (/* binding */ restoreGrid),\n/* harmony export */   restoreGridInactive: () => (/* binding */ restoreGridInactive),\n/* harmony export */   setVisibility: () => (/* binding */ setVisibility)\n/* harmony export */ });\n/* harmony import */ var _settings_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../settings.js */ \"./src/settings.js\");\n/* harmony import */ var _mapUtils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mapUtils.js */ \"./src/js/mapUtils.js\");\n/* harmony import */ var _dataAccessContext_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./dataAccessContext.js */ \"./src/js/dataAccessContext.js\");\n\r\n\r\n\r\n\r\nconst dataAccess = _dataAccessContext_js__WEBPACK_IMPORTED_MODULE_2__.create(_settings_js__WEBPACK_IMPORTED_MODULE_0__.dataStoreType);\r\n\r\nconst deleteConfirmMessage = \"Confirm that you want to delete the grid?\";\r\n\r\nlet gridLines = [];\r\nlet gridLinesInactive = [];\r\n\r\nconst calculateGridPaths = (map, gridWidth, gridHeight, rotationAngle) => {\r\n    var bounds = map.getBounds();\r\n    var sw = bounds.getSouthWest();\r\n    var ne = bounds.getNorthEast();\r\n    var center = map.getCenter();\r\n    var hLinePaths = [];\r\n    var vLinePaths = [];\r\n\r\n    var latLngToPoint = function (latLng) {\r\n        var topRight = map.getProjection().fromLatLngToPoint(ne);\r\n        var bottomLeft = map.getProjection().fromLatLngToPoint(sw);\r\n        var scale = Math.pow(2, map.getZoom());\r\n        var worldPoint = map.getProjection().fromLatLngToPoint(latLng);\r\n        return new google.maps.Point(\r\n            (worldPoint.x - bottomLeft.x) * scale,\r\n            (worldPoint.y - topRight.y) * scale\r\n        );\r\n    };\r\n\r\n    var pointToLatLng = function (point) {\r\n        var topRight = map.getProjection().fromLatLngToPoint(ne);\r\n        var bottomLeft = map.getProjection().fromLatLngToPoint(sw);\r\n        var scale = Math.pow(2, map.getZoom());\r\n        var worldPoint = new google.maps.Point(\r\n            point.x / scale + bottomLeft.x,\r\n            point.y / scale + topRight.y\r\n        );\r\n        return map.getProjection().fromPointToLatLng(worldPoint);\r\n    };\r\n\r\n    var angleRad = rotationAngle * Math.PI / 180;\r\n    var centerPoint = latLngToPoint(center);\r\n\r\n    // Calculate horizontal lines\r\n    for (var lat = sw.lat(); lat < ne.lat(); lat += gridHeight / 111320) {\r\n        var start = new google.maps.LatLng(lat, sw.lng());\r\n        var end = new google.maps.LatLng(lat, ne.lng());\r\n        var startPoint = latLngToPoint(start);\r\n        var endPoint = latLngToPoint(end);\r\n\r\n        var rotatedStartPoint = new google.maps.Point(\r\n            (startPoint.x - centerPoint.x) * Math.cos(angleRad) - (startPoint.y - centerPoint.y) * Math.sin(angleRad) + centerPoint.x,\r\n            (startPoint.x - centerPoint.x) * Math.sin(angleRad) + (startPoint.y - centerPoint.y) * Math.cos(angleRad) + centerPoint.y\r\n        );\r\n        var rotatedEndPoint = new google.maps.Point(\r\n            (endPoint.x - centerPoint.x) * Math.cos(angleRad) - (endPoint.y - centerPoint.y) * Math.sin(angleRad) + centerPoint.x,\r\n            (endPoint.x - centerPoint.x) * Math.sin(angleRad) + (endPoint.y - centerPoint.y) * Math.cos(angleRad) + centerPoint.y\r\n        );\r\n\r\n        var rotatedStart = pointToLatLng(rotatedStartPoint);\r\n        var rotatedEnd = pointToLatLng(rotatedEndPoint);\r\n\r\n        hLinePaths.push([{ lat: rotatedStart.lat(), lng: rotatedStart.lng() }, { lat: rotatedEnd.lat(), lng: rotatedEnd.lng() }]);\r\n    }\r\n\r\n    // Calculate vertical lines\r\n    for (var lng = sw.lng(); lng < ne.lng(); lng += gridWidth / (111320 * Math.cos(sw.lat() * Math.PI / 180))) {\r\n        var start = new google.maps.LatLng(sw.lat(), lng);\r\n        var end = new google.maps.LatLng(ne.lat(), lng);\r\n        var startPoint = latLngToPoint(start);\r\n        var endPoint = latLngToPoint(end);\r\n\r\n        var rotatedStartPoint = new google.maps.Point(\r\n            (startPoint.x - centerPoint.x) * Math.cos(angleRad) - (startPoint.y - centerPoint.y) * Math.sin(angleRad) + centerPoint.x,\r\n            (startPoint.x - centerPoint.x) * Math.sin(angleRad) + (startPoint.y - centerPoint.y) * Math.cos(angleRad) + centerPoint.y\r\n        );\r\n        var rotatedEndPoint = new google.maps.Point(\r\n            (endPoint.x - centerPoint.x) * Math.cos(angleRad) - (endPoint.y - centerPoint.y) * Math.sin(angleRad) + centerPoint.x,\r\n            (endPoint.x - centerPoint.x) * Math.sin(angleRad) + (endPoint.y - centerPoint.y) * Math.cos(angleRad) + centerPoint.y\r\n        );\r\n\r\n        var rotatedStart = pointToLatLng(rotatedStartPoint);\r\n        var rotatedEnd = pointToLatLng(rotatedEndPoint);\r\n\r\n        vLinePaths.push([{ lat: rotatedStart.lat(), lng: rotatedStart.lng() }, { lat: rotatedEnd.lat(), lng: rotatedEnd.lng() }]);\r\n    }\r\n\r\n    return { hPaths: hLinePaths, vPaths: vLinePaths };\r\n}\r\n\r\nconst createGridLine = (map, path) => {\r\n    var line = new google.maps.Polyline({\r\n        path: path,\r\n        geodesic: true,\r\n        zIndex: 10,\r\n        strokeColor: _settings_js__WEBPACK_IMPORTED_MODULE_0__.gridColour,\r\n        strokeOpacity: _settings_js__WEBPACK_IMPORTED_MODULE_0__.gridStrokeOpacity,\r\n        strokeWeight: _settings_js__WEBPACK_IMPORTED_MODULE_0__.gridStrokeWeight,\r\n    });\r\n\r\n    line.setMap(map);\r\n\r\n    return line;\r\n};\r\n\r\nconst renderGrid = (map, paths) => {\r\n    let lines = [];\r\n\r\n    if (map !== null && paths !== null) {\r\n        if (map && paths) {\r\n            paths.hPaths.forEach(path => {\r\n                const line = createGridLine(map, path);\r\n                lines.push(line);\r\n            });\r\n\r\n            paths.vPaths.forEach(path => {\r\n                const line = createGridLine(map, path);\r\n                lines.push(line);\r\n            });\r\n        }\r\n    }\r\n\r\n    return lines;\r\n}\r\n\r\nconst renderGridActive = (map, paths) => {\r\n    gridLines = renderGrid(map, paths);\r\n}\r\n\r\nconst setVisibility = (projectContext, visible) => {\r\n    const grid = dataAccess.gridGet(projectContext.projectKey, projectContext.segmentKey);\r\n    grid.visible = visible;\r\n    dataAccess.gridUpdate(projectContext.projectKey, projectContext.segmentKey, grid);\r\n\r\n    restoreGrid(projectContext);\r\n}\r\n\r\nconst saveGrid = (projectContext, gridPaths) => {\r\n    const segment = dataAccess.segmentGet(projectContext.projectKey, projectContext.segmentKey);\r\n\r\n    segment.grid.paths = gridPaths;\r\n    // Set the map view\r\n    segment.map = _mapUtils_js__WEBPACK_IMPORTED_MODULE_1__.getMapDetailsFromUrl();\r\n\r\n    dataAccess.segmentUpdate(projectContext.projectKey, projectContext.segmentKey, segment, true);\r\n}\r\n\r\nconst clearGrid = () => {\r\n    if (gridLines !== undefined && gridLines !== null) {\r\n        for (let i = 0; i < gridLines.length; i++) {\r\n            gridLines[i].setMap(null);\r\n            gridLines[i] = null;\r\n        }\r\n        gridLines = [];\r\n    }\r\n}\r\n\r\nconst clearGridInactive = () => {\r\n    if (gridLinesInactive !== undefined && gridLinesInactive !== null) {\r\n        for (let i = 0; i < gridLinesInactive.length; i++) {\r\n            gridLinesInactive[i].setMap(null);\r\n            gridLinesInactive[i] = null;\r\n        }\r\n        gridLinesInactive = [];\r\n    }\r\n}\r\n\r\nconst deleteGrid = (projectContext) => {\r\n    const grid = dataAccess.gridGet(projectContext.projectKey, projectContext.segmentKey);\r\n    if (grid.paths !== null) {\r\n        if (!window.confirm(deleteConfirmMessage)) {\r\n            return;\r\n        }\r\n    }\r\n\r\n    clearGrid();\r\n\r\n    grid.paths = null;\r\n\r\n    dataAccess.gridUpdate(projectContext.projectKey, projectContext.segmentKey, grid);\r\n}\r\n\r\nconst drawGrid = (projectContext) => {\r\n    const mapZoom = projectContext.map.getZoom();\r\n    const mapHeading = projectContext.map.getHeading();\r\n\r\n    if (mapZoom < _settings_js__WEBPACK_IMPORTED_MODULE_0__.minZoomForGrid) {\r\n        window.alert(`The zoom level is currently ${mapZoom.toFixed(1)}, to draw a grid it must be greater than ${_settings_js__WEBPACK_IMPORTED_MODULE_0__.minZoomForGrid}, zoom in closer and try again.`);\r\n        return;\r\n    }\r\n\r\n    clearGrid();\r\n\r\n    const gridWidth = projectContext.segmentSettings.mapGridWidth;\r\n    const gridHeight = projectContext.segmentSettings.mapGridHeight;\r\n\r\n    const gridPaths = calculateGridPaths(projectContext.map, gridWidth, gridHeight, mapHeading);\r\n\r\n    saveGrid(projectContext, gridPaths);\r\n\r\n    renderGridActive(projectContext.map, gridPaths);\r\n}\r\n\r\nconst restoreGrid = (projectContext) => {\r\n    clearGrid();\r\n\r\n    const grid = dataAccess.gridGet(projectContext.projectKey, projectContext.segmentKey);\r\n\r\n    if (grid && grid.visible && grid.paths) {\r\n        renderGridActive(projectContext.map, grid.paths);\r\n    }\r\n}\r\n\r\nconst restoreGridInactive = (projectContext, inactiveSegments) => {\r\n    clearGridInactive();\r\n\r\n    inactiveSegments.forEach(s => {\r\n        if (s.grid.visible)\r\n            gridLinesInactive.push(...renderGrid(projectContext.map, s.grid.paths));\r\n    });\r\n}\r\n\r\n \n\n//# sourceURL=webpack://agroforestgrid/./src/js/mapGrid.js?");

/***/ }),

/***/ "./src/js/mapPolygons.js":
/*!*******************************!*\
  !*** ./src/js/mapPolygons.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   capturePolygon: () => (/* binding */ capturePolygon),\n/* harmony export */   deletePolygons: () => (/* binding */ deletePolygons),\n/* harmony export */   polygonBoundaryOptions: () => (/* binding */ polygonBoundaryOptions),\n/* harmony export */   polygonTreeGroupOptions: () => (/* binding */ polygonTreeGroupOptions),\n/* harmony export */   restorePolygons: () => (/* binding */ restorePolygons),\n/* harmony export */   restorePolygonsInactive: () => (/* binding */ restorePolygonsInactive),\n/* harmony export */   setVisibility: () => (/* binding */ setVisibility)\n/* harmony export */ });\n/* harmony import */ var _settings_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../settings.js */ \"./src/settings.js\");\n/* harmony import */ var _mapUtils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mapUtils.js */ \"./src/js/mapUtils.js\");\n/* harmony import */ var _dataAccessContext_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./dataAccessContext.js */ \"./src/js/dataAccessContext.js\");\n\r\n\r\n\r\n\r\nconst dataAccess = _dataAccessContext_js__WEBPACK_IMPORTED_MODULE_2__.create(_settings_js__WEBPACK_IMPORTED_MODULE_0__.dataStoreType);\r\n\r\nconst deleteConfirmMessage = \"Confirm that you want to delete polygons?\";\r\nconst deleteExistingBoundaryConfirmMessage = \"Confirm that you want to delete the existing boundary polygon?\";\r\n\r\nlet polygonObjects = [];\r\nlet polygonObjectsInactive = [];\r\n\r\nconst polygonBoundaryOptions = {\r\n    editable: true,\r\n    draggable: false,\r\n    geodesic: true,\r\n    zIndex: 20,\r\n    strokeColor: _settings_js__WEBPACK_IMPORTED_MODULE_0__.polygonBoundaryStrokeColour,\r\n    strokeOpacity: _settings_js__WEBPACK_IMPORTED_MODULE_0__.polygonBoundaryStrokeOpacity,\r\n    strokeWeight: _settings_js__WEBPACK_IMPORTED_MODULE_0__.polygonBoundaryStrokeWeight,\r\n    fillColor: _settings_js__WEBPACK_IMPORTED_MODULE_0__.polygonBoundaryFillColour,\r\n    fillOpacity: _settings_js__WEBPACK_IMPORTED_MODULE_0__.polygonBoundaryFillOpacity,\r\n}\r\n\r\nconst polygonTreeGroupOptions = {\r\n    editable: true,\r\n    draggable: false,\r\n    geodesic: true,\r\n    zIndex: 24,\r\n    strokeColor: _settings_js__WEBPACK_IMPORTED_MODULE_0__.polygonTreeGroupStrokeColour,\r\n    strokeOpacity: _settings_js__WEBPACK_IMPORTED_MODULE_0__.polygonTreeGroupStrokeOpacity,\r\n    strokeWeight: _settings_js__WEBPACK_IMPORTED_MODULE_0__.polygonTreeGroupStrokeWeight,\r\n    fillColor: _settings_js__WEBPACK_IMPORTED_MODULE_0__.polygonTreeGroupFillColour,\r\n    fillOpacity: _settings_js__WEBPACK_IMPORTED_MODULE_0__.polygonTreeGroupFillOpacity,\r\n}\r\n\r\nconst setPolygonProperties = (polygon, polygonObject) => {\r\n    if (polygon !== null & polygonObject !== null) {\r\n        const path = polygonObject.getPath();\r\n        polygon.path = convertPathObjectToCoordinates(path);\r\n        polygon.area = parseFloat(google.maps.geometry.spherical.computeArea(path).toFixed(2));\r\n        polygon.perimeter = parseFloat(google.maps.geometry.spherical.computeLength(path).toFixed(1));\r\n    }\r\n}\r\n\r\nconst convertPathObjectToCoordinates = (path) => {\r\n    var coordinates = [];\r\n    path.forEach((latLng) => {\r\n        coordinates.push({ lat: latLng.lat(), lng: latLng.lng() });\r\n    });\r\n    return coordinates;\r\n}\r\n\r\nconst savePolygon = (projectContext, polygonObject) => {\r\n    const segment = dataAccess.segmentGet(projectContext.projectKey, projectContext.segmentKey);\r\n\r\n    const polygonId = polygonObject.get('id');\r\n    const index = segment.polygons.findIndex(p => p.id === polygonId);\r\n    const polygon = segment.polygons[index];\r\n\r\n    setPolygonProperties(polygon, polygonObject);\r\n\r\n    // Set the map view\r\n    segment.map = _mapUtils_js__WEBPACK_IMPORTED_MODULE_1__.getMapDetailsFromUrl();\r\n\r\n    dataAccess.segmentUpdate(projectContext.projectKey, projectContext.segmentKey, segment, true);\r\n}\r\n\r\nconst deletePolygon = (projectContext, polygonObject) => {\r\n    const segment = dataAccess.segmentGet(projectContext.projectKey, projectContext.segmentKey);\r\n\r\n    const polygonId = polygonObject.get('id');\r\n    const index = segment.polygons.findIndex(p => p.id === polygonId);\r\n    segment.polygons.splice(index, 1);\r\n\r\n    dataAccess.segmentUpdate(projectContext.projectKey, projectContext.segmentKey, segment, true);\r\n}\r\n\r\nconst setupPolygonsEventListeners = (projectContext, polygonObjects) => {\r\n    polygonObjects.forEach((polygonObject) => {\r\n\r\n        const path = polygonObject.getPath();\r\n\r\n        google.maps.event.addListener(path, 'set_at', () => {\r\n            savePolygon(projectContext, polygonObject);\r\n            polygonObject.setEditable(false);\r\n        });\r\n\r\n        google.maps.event.addListener(path, 'insert_at', () => {\r\n            savePolygon(projectContext, polygonObject);\r\n        });\r\n\r\n        google.maps.event.addListener(polygonObject, 'mouseover', () => {\r\n            polygonObject.setEditable(true);\r\n        });\r\n\r\n        google.maps.event.addListener(polygonObject, 'dblclick', () => {\r\n            deletePolygon(projectContext, polygonObject);\r\n            polygonObject.setMap(null);\r\n        });\r\n    });\r\n}\r\n\r\nconst renderPolygons = (map, polygons) => {\r\n    let polygonObjects = [];\r\n\r\n    if (map !== null && polygons !== null) {\r\n\r\n        polygons.forEach(p => {\r\n            if (p.visible) {\r\n                const polygonObject = new google.maps.Polygon({\r\n                    paths: p.path\r\n                });\r\n                polygonObject.setOptions((p.type == 'treeGroup') ? polygonTreeGroupOptions : polygonBoundaryOptions);\r\n                polygonObject.setEditable(false);\r\n                polygonObject.setMap(map);\r\n                polygonObject.set('id', p.id);\r\n\r\n                polygonObjects.push(polygonObject);\r\n            }\r\n        });\r\n    }\r\n\r\n    return polygonObjects;\r\n}\r\n\r\nconst renderPolygonsActive = (projectContext, polygons) => {\r\n    polygonObjects = renderPolygons(projectContext.map, polygons);\r\n}\r\n\r\nconst setVisibility = (projectContext, polygonType, visible) => {\r\n    const polygons = dataAccess.polygonsGet(projectContext.projectKey, projectContext.segmentKey);\r\n\r\n    polygons.forEach(polygon => {\r\n        if (polygon.type === polygonType)\r\n            polygon.visible = visible;\r\n    })\r\n\r\n    dataAccess.polygonsUpdate(projectContext.projectKey, projectContext.segmentKey, polygons);\r\n\r\n    restorePolygons(projectContext);\r\n}\r\n\r\nconst clearPolygons = () => {\r\n    if (polygonObjects !== undefined && polygonObjects !== null) {\r\n        for (let i = 0; i < polygonObjects.length; i++) {\r\n            polygonObjects[i].setMap(null);\r\n            polygonObjects[i] = null;\r\n        }\r\n        polygonObjects = [];\r\n    }\r\n}\r\n\r\nconst clearPolygonsInactive = () => {\r\n    if (polygonObjectsInactive !== undefined && polygonObjectsInactive !== null) {\r\n        for (let i = 0; i < polygonObjectsInactive.length; i++) {\r\n            polygonObjectsInactive[i].setMap(null);\r\n            polygonObjectsInactive[i] = null;\r\n        }\r\n        polygonObjectsInactive = [];\r\n    }\r\n}\r\n\r\nconst deletePolygons = (projectContext, polygonType) => {\r\n    if (!window.confirm(deleteConfirmMessage)) {\r\n        return;\r\n    }\r\n\r\n    clearPolygons();\r\n\r\n    const polygons = dataAccess.polygonsGet(projectContext.projectKey, projectContext.segmentKey);\r\n\r\n    const filteredPolygons = polygons.filter(p => p.type !== polygonType);\r\n\r\n    dataAccess.polygonsUpdate(projectContext.projectKey, projectContext.segmentKey, filteredPolygons);\r\n\r\n    restorePolygons(projectContext);\r\n}\r\n\r\nconst capturePolygon = (event, projectContext, polygonType) => {\r\n    let polygons = dataAccess.polygonsGet(projectContext.projectKey, projectContext.segmentKey);\r\n    if (polygons === null) polygons = [];\r\n\r\n    // Only one boundary allowed per segment\r\n    if (polygonType == \"boundary\") {\r\n        const boundaryPathIndex = polygons.findIndex(p => p.type == 'boundary');\r\n        if (boundaryPathIndex >= 0) {\r\n            if (!window.confirm(deleteExistingBoundaryConfirmMessage)) {\r\n                event.overlay.setMap(null);\r\n                return;\r\n            } else {\r\n                polygons.splice(boundaryPathIndex, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    const polygonObject = event.overlay;\r\n    polygonObject.setEditable(false);\r\n\r\n    const newPolygon = {\r\n        id: dataAccess.createNewId(),\r\n        type: polygonType,\r\n        visible: true\r\n    };\r\n    setPolygonProperties(newPolygon, polygonObject);\r\n\r\n    polygons.push(newPolygon);\r\n\r\n    dataAccess.polygonsUpdate(projectContext.projectKey, projectContext.segmentKey, polygons);\r\n\r\n    polygonObject.setMap(null);\r\n\r\n    restorePolygons(projectContext);\r\n};\r\n\r\nconst restorePolygons = (projectContext) => {\r\n    clearPolygons();\r\n\r\n    const polygons = dataAccess.polygonsGet(projectContext.projectKey, projectContext.segmentKey);\r\n\r\n    if (polygons && polygons.length > 0) {\r\n        renderPolygonsActive(projectContext, polygons);\r\n        setupPolygonsEventListeners(projectContext, polygonObjects);\r\n    }\r\n}\r\n\r\nconst restorePolygonsInactive = (projectContext, inactiveSegments) => {\r\n    clearPolygonsInactive(projectContext);\r\n\r\n    let polygonsInactive = [];\r\n    inactiveSegments.forEach(s => {\r\n        if (s.polygons && s.polygons.length > 0) {\r\n            s.polygons.forEach(p => {\r\n                if (p.visible) {\r\n                    polygonsInactive.push(p);\r\n                }\r\n            })\r\n        }\r\n    });\r\n\r\n    polygonObjectsInactive = renderPolygons(projectContext.map, polygonsInactive);\r\n}\r\n\r\n \n\n//# sourceURL=webpack://agroforestgrid/./src/js/mapPolygons.js?");

/***/ }),

/***/ "./src/js/mapTrees.js":
/*!****************************!*\
  !*** ./src/js/mapTrees.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   captureTreeCircle: () => (/* binding */ captureTreeCircle),\n/* harmony export */   deleteTrees: () => (/* binding */ deleteTrees),\n/* harmony export */   drawTrees: () => (/* binding */ drawTrees),\n/* harmony export */   restoreTrees: () => (/* binding */ restoreTrees),\n/* harmony export */   restoreTreesInactive: () => (/* binding */ restoreTreesInactive),\n/* harmony export */   setVisibility: () => (/* binding */ setVisibility),\n/* harmony export */   treeCircleOptions: () => (/* binding */ treeCircleOptions)\n/* harmony export */ });\n/* harmony import */ var _settings_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../settings.js */ \"./src/settings.js\");\n/* harmony import */ var _dataAccessContext_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dataAccessContext.js */ \"./src/js/dataAccessContext.js\");\n\r\n\r\n\r\nconst dataAccess = _dataAccessContext_js__WEBPACK_IMPORTED_MODULE_1__.create(_settings_js__WEBPACK_IMPORTED_MODULE_0__.dataStoreType);\r\nconst mapTreeDetails = document.getElementById(\"map-tree-details\");\r\n\r\nconst treesPrereqErrorMessage = \"Draw a Grid and Polygon before drawing Trees\"; \r\nconst deleteConfirmMessage = \"Confirm that you want to delete the trees?\";\r\n\r\nlet treeCircles = [];\r\nlet treeCirclesInactive = [];\r\nlet activeTreePoint = null;\r\n\r\nconst treeCircleOptions = {\r\n    clickable: true,\r\n    editable: false,\r\n    draggable: true,\r\n    zIndex: 30,\r\n    strokeColor: _settings_js__WEBPACK_IMPORTED_MODULE_0__.treeCircleStrokeColour,\r\n    strokeOpacity: _settings_js__WEBPACK_IMPORTED_MODULE_0__.treeCircleStrokeOpacity,\r\n    strokeWeight: _settings_js__WEBPACK_IMPORTED_MODULE_0__.treeCircleStrokeWeight,\r\n    fillColor: _settings_js__WEBPACK_IMPORTED_MODULE_0__.treeCircleFillColour,\r\n    fillOpacity: _settings_js__WEBPACK_IMPORTED_MODULE_0__.treeCircleFillOpacity,\r\n}\r\n\r\nconst getLinesIntersection = (hLine, vLine) => {\r\n    const { lat: lat1, lng: lng1 } = hLine[0];\r\n    const { lat: lat2, lng: lng2 } = hLine[1];\r\n    const { lat: lat3, lng: lng3 } = vLine[0];\r\n    const { lat: lat4, lng: lng4 } = vLine[1];\r\n\r\n    const denominator = (lat1 - lat2) * (lng3 - lng4) - (lng1 - lng2) * (lat3 - lat4);\r\n    if (denominator === 0) {\r\n        return null; // Lines are parallel\r\n    }\r\n\r\n    const latNumerator = (lat1 * lng2 - lng1 * lat2) * (lat3 - lat4) - (lat1 - lat2) * (lat3 * lng4 - lng3 * lat4);\r\n    const lngNumerator = (lat1 * lng2 - lng1 * lat2) * (lng3 - lng4) - (lng1 - lng2) * (lat3 * lng4 - lng3 * lat4);\r\n\r\n    const lat = latNumerator / denominator;\r\n    const lng = lngNumerator / denominator;\r\n\r\n    return { lat, lng };\r\n}\r\n\r\nconst findGridIntersections = (horizontalLines, verticalLines) => {\r\n    // PROMPT: I am working with the Google maps API. I have an two arrays with pairs of lat and lng objects, the first array representing the horizontal lines of a grid, the other representing the vertical lines of a grid. Write a javascript function to return an array lat and lng values which represent the intersection point of the grid. The grid may be rotated relative to lat and lng.\r\n\r\n    const intersections = [];\r\n\r\n    horizontalLines.forEach(hLine => {\r\n        verticalLines.forEach(vLine => {\r\n            const intersection = getLinesIntersection(hLine, vLine);\r\n            if (intersection) {\r\n                intersections.push(intersection);\r\n            }\r\n        });\r\n    });\r\n\r\n    return intersections;\r\n}\r\n\r\nconst filterPointsInsidePolygon = (points, polygonPath) => {\r\n    // PROMPT: I am working with the Google maps API. I have an array lat and lng objects that represent points. I have a separate array of lat and lng objects that represent the path of a polygon. Write a javascript function to return a filtered array of points, with only include the points inside the polygon\r\n\r\n    // Create a new polygon object\r\n    const polygon = new google.maps.Polygon({ paths: polygonPath });\r\n\r\n    // Filter points that are inside the polygon\r\n    return points.filter(point => {\r\n        const latLng = new google.maps.LatLng(point.lat, point.lng);\r\n        return google.maps.geometry.poly.containsLocation(latLng, polygon);\r\n    });\r\n}\r\n\r\nconst calculateTreePoints = (gridPaths, polygonPath) => {\r\n    const points = findGridIntersections(gridPaths.hPaths, gridPaths.vPaths);\r\n\r\n    const filteredPoints = filterPointsInsidePolygon(points, polygonPath);\r\n\r\n    return filteredPoints;\r\n};\r\n\r\nconst createTreeCircle = (map, point, treeDiameter, draggable) => {\r\n    const circle = new google.maps.Circle(treeCircleOptions);\r\n    circle.setRadius(treeDiameter / 2);\r\n    circle.setCenter(point);\r\n    circle.setMap(map);\r\n    circle.draggable = draggable;\r\n\r\n    return circle;\r\n}\r\n\r\nconst captureTreeCircle = (event, projectContext) => {\r\n    const point = event.overlay.getCenter();\r\n    event.overlay.setMap(null);  // Remove the original circle\r\n\r\n    // Save the new circle point\r\n    const trees = dataAccess.treesGet(projectContext.projectKey, projectContext.segmentKey);\r\n    trees.points.push(point);\r\n    dataAccess.treesUpdate(projectContext.projectKey, projectContext.segmentKey, trees);\r\n\r\n    restoreTrees(projectContext);\r\n}\r\n\r\nconst renderTrees = (map, points, treeDiameter, draggable) => {\r\n    let trees = [];\r\n\r\n    if (points !== null) {\r\n        points.forEach((point) => {\r\n            const circle = createTreeCircle(map, point, treeDiameter, draggable);\r\n            trees.push(circle);\r\n        });\r\n    }\r\n\r\n    return trees;\r\n};\r\n\r\nconst renderTreesActive = (projectContext, points) => {\r\n    const treeDiameter = projectContext.segmentSettings.treeDiameter;\r\n    treeCircles = renderTrees(projectContext.map, points, treeDiameter, true);\r\n    setupTreeEventListeners(projectContext, treeCircles);\r\n\r\n    if (points != null) {\r\n        const details = `Tree count: ${points.length}`;\r\n        mapTreeDetails.innerText = details;\r\n    }\r\n}\r\n\r\nconst setupTreeEventListeners = (projectContext, treeCircles) => {\r\n    treeCircles.forEach(tree => {\r\n        google.maps.event.addListener(tree, 'dblclick', function () {\r\n            const treeCenter = tree.getCenter();\r\n            const point = { lat: treeCenter.lat(), lng: treeCenter.lng() };\r\n\r\n            const trees = dataAccess.treesGet(projectContext.projectKey, projectContext.segmentKey);\r\n            const newTreePoints = trees.points.filter(item =>\r\n                item.lat !== point.lat || item.lng !== point.lng\r\n            );\r\n            trees.points = newTreePoints;\r\n            dataAccess.treesUpdate(projectContext.projectKey, projectContext.segmentKey, trees);\r\n\r\n            restoreTrees(projectContext);\r\n        });\r\n\r\n        google.maps.event.addListener(tree, 'dragstart', function () {\r\n            activeTreePoint = { lat: tree.getCenter().lat(), lng: tree.getCenter().lng() };\r\n        });\r\n\r\n        google.maps.event.addListener(tree, 'dragend', function () {\r\n            const newTreePoint = tree.getCenter();\r\n            const newPoint = { lat: newTreePoint.lat(), lng: newTreePoint.lng() };\r\n\r\n            // update tree location\r\n            if (activeTreePoint !== null) {\r\n                const trees = dataAccess.treesGet(projectContext.projectKey, projectContext.segmentKey);\r\n                const index = trees.points.findIndex(t => t.lat === activeTreePoint.lat && t.lng === activeTreePoint.lng);\r\n                if (index !== -1) {\r\n                    trees.points[index] = newPoint;\r\n                    dataAccess.treesUpdate(projectContext.projectKey, projectContext.segmentKey, trees);\r\n                }\r\n            }\r\n\r\n            activeTreePoint = null;\r\n        });\r\n    });\r\n};\r\n\r\nconst setVisibility = (projectContext, visible) => {\r\n    const trees = dataAccess.treesGet(projectContext.projectKey, projectContext.segmentKey);\r\n    trees.visible = visible;\r\n    dataAccess.treesUpdate(projectContext.projectKey, projectContext.segmentKey, trees);\r\n\r\n    restoreTrees(projectContext);\r\n}\r\n\r\nconst clearTrees = () => {\r\n    mapTreeDetails.innerText = \"\";\r\n\r\n    if (treeCircles !== undefined && treeCircles !== null) {\r\n        for (let i = 0; i < treeCircles.length; i++) {\r\n            treeCircles[i].setMap(null);\r\n            treeCircles[i] = null;\r\n        }\r\n        treeCircles = [];\r\n    }\r\n}\r\n\r\nconst clearTreesInactive = () => {\r\n    if (treeCirclesInactive !== undefined && treeCirclesInactive !== null) {\r\n        for (let i = 0; i < treeCirclesInactive.length; i++) {\r\n            treeCirclesInactive[i].setMap(null);\r\n            treeCirclesInactive[i] = null;\r\n        }\r\n        treeCirclesInactive = [];\r\n    }\r\n}\r\n\r\nconst deleteTrees = (projectContext) => {\r\n    const trees = dataAccess.treesGet(projectContext.projectKey, projectContext.segmentKey);\r\n    if (trees.points !== null) {\r\n        if (!window.confirm(deleteConfirmMessage)) {\r\n            return;\r\n        }\r\n    }\r\n\r\n    clearTrees();\r\n\r\n    trees.points = null;\r\n\r\n    dataAccess.treesUpdate(projectContext.projectKey, projectContext.segmentKey, trees);\r\n}\r\n\r\nconst drawTrees = (projectContext) => {\r\n    const segment = dataAccess.segmentGet(projectContext.projectKey, projectContext.segmentKey);\r\n\r\n    if (segment.grid.paths && segment.polygons && segment.polygons.length > 0) {\r\n        clearTrees();\r\n\r\n        let treePoints = [];\r\n\r\n        const boundaryPaths = segment.polygons.filter(p => p.type == 'boundary');\r\n        const treeGroupPaths = segment.polygons.filter(p => p.type == 'treeGroup');\r\n\r\n        if (treeGroupPaths.length > 0) {\r\n            treeGroupPaths.forEach(p => {\r\n                treePoints.push(...calculateTreePoints(segment.grid.paths, p.path));\r\n            });\r\n        } else {\r\n            boundaryPaths.forEach(p => {\r\n                treePoints.push(...calculateTreePoints(segment.grid.paths, p.path));\r\n            });\r\n        }\r\n\r\n        segment.trees.points = treePoints;\r\n\r\n        dataAccess.treesUpdate(projectContext.projectKey, projectContext.segmentKey, segment.trees);\r\n\r\n        renderTreesActive(projectContext, treePoints, true);\r\n    } else {\r\n        window.alert(treesPrereqErrorMessage);\r\n    }\r\n}\r\n\r\nconst restoreTrees = (projectContext) => {\r\n    clearTrees();\r\n\r\n    const trees = dataAccess.treesGet(projectContext.projectKey, projectContext.segmentKey);\r\n\r\n    if (trees && trees.visible && trees.points && trees.points.length > 0) {\r\n        renderTreesActive(projectContext, trees.points, true);\r\n    }\r\n}\r\n\r\nconst restoreTreesInactive = (projectContext, inactiveSegments) => {\r\n    clearTreesInactive();\r\n\r\n    inactiveSegments.forEach(s => {\r\n        if (s.trees.visible)\r\n            treeCirclesInactive.push(...renderTrees(projectContext.map, s.trees.points, s.trees.diameter, false));\r\n    });\r\n}\r\n\r\n \n\n//# sourceURL=webpack://agroforestgrid/./src/js/mapTrees.js?");

/***/ }),

/***/ "./src/js/mapUtils.js":
/*!****************************!*\
  !*** ./src/js/mapUtils.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getMapDetailsFromUrl: () => (/* binding */ getMapDetailsFromUrl)\n/* harmony export */ });\n\r\n\r\nconst getMapDetailsFromUrl = () => {\r\n    let lat, lng, heading, tilt, zoom;\r\n\r\n    const querystringParameters = new URLSearchParams(window.location.search);\r\n    if (querystringParameters !== null && querystringParameters?.size > 0) {\r\n        lat = querystringParameters.get('lat') ? parseFloat(querystringParameters.get('lat')) : startingLat;\r\n        lng = querystringParameters.get('lng') ? parseFloat(querystringParameters.get('lng')) : startingLng;\r\n        zoom = querystringParameters.get('zoom') ? parseFloat(querystringParameters.get('zoom')) : startingZoom;\r\n        heading = querystringParameters.get('heading') ? parseInt(querystringParameters.get('heading')) : startingHeading;\r\n        tilt = querystringParameters.get('tilt') ? parseInt(querystringParameters.get('tilt')) : startingTilt;\r\n    }\r\n\r\n    return {\r\n        lat: lat,\r\n        lng: lng,\r\n        zoom: zoom,\r\n        heading: heading,\r\n        tilt: tilt\r\n    };\r\n}\r\n\r\n\n\n//# sourceURL=webpack://agroforestgrid/./src/js/mapUtils.js?");

/***/ }),

/***/ "./src/settings.js":
/*!*************************!*\
  !*** ./src/settings.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   dataStoreType: () => (/* binding */ dataStoreType),\n/* harmony export */   defaultGridHeightMeters: () => (/* binding */ defaultGridHeightMeters),\n/* harmony export */   defaultGridWidthMeters: () => (/* binding */ defaultGridWidthMeters),\n/* harmony export */   defaultTreeDiameterMeters: () => (/* binding */ defaultTreeDiameterMeters),\n/* harmony export */   gridColour: () => (/* binding */ gridColour),\n/* harmony export */   gridStrokeOpacity: () => (/* binding */ gridStrokeOpacity),\n/* harmony export */   gridStrokeWeight: () => (/* binding */ gridStrokeWeight),\n/* harmony export */   minZoomForGrid: () => (/* binding */ minZoomForGrid),\n/* harmony export */   polygonBoundaryFillColour: () => (/* binding */ polygonBoundaryFillColour),\n/* harmony export */   polygonBoundaryFillOpacity: () => (/* binding */ polygonBoundaryFillOpacity),\n/* harmony export */   polygonBoundaryStrokeColour: () => (/* binding */ polygonBoundaryStrokeColour),\n/* harmony export */   polygonBoundaryStrokeOpacity: () => (/* binding */ polygonBoundaryStrokeOpacity),\n/* harmony export */   polygonBoundaryStrokeWeight: () => (/* binding */ polygonBoundaryStrokeWeight),\n/* harmony export */   polygonTreeGroupFillColour: () => (/* binding */ polygonTreeGroupFillColour),\n/* harmony export */   polygonTreeGroupFillOpacity: () => (/* binding */ polygonTreeGroupFillOpacity),\n/* harmony export */   polygonTreeGroupStrokeColour: () => (/* binding */ polygonTreeGroupStrokeColour),\n/* harmony export */   polygonTreeGroupStrokeOpacity: () => (/* binding */ polygonTreeGroupStrokeOpacity),\n/* harmony export */   polygonTreeGroupStrokeWeight: () => (/* binding */ polygonTreeGroupStrokeWeight),\n/* harmony export */   startingLat: () => (/* binding */ startingLat),\n/* harmony export */   startingLng: () => (/* binding */ startingLng),\n/* harmony export */   startingZoom: () => (/* binding */ startingZoom),\n/* harmony export */   treeCircleFillColour: () => (/* binding */ treeCircleFillColour),\n/* harmony export */   treeCircleFillOpacity: () => (/* binding */ treeCircleFillOpacity),\n/* harmony export */   treeCircleStrokeColour: () => (/* binding */ treeCircleStrokeColour),\n/* harmony export */   treeCircleStrokeOpacity: () => (/* binding */ treeCircleStrokeOpacity),\n/* harmony export */   treeCircleStrokeWeight: () => (/* binding */ treeCircleStrokeWeight)\n/* harmony export */ });\n\r\n// export const startingLat = 54.071163;\r\n// export const startingLng = -8.482581;\r\n// export const startingZoom = 18.0;\r\n\r\n/* the data store type; dataAccessApi or dataAccessLocal */\r\nconst dataStoreType = 'dataAccessLocal';\r\n\r\nconst startingLat = 53.284068;\r\nconst startingLng = -7.263012;\r\nconst startingZoom = 6.0;\r\n\r\nconst defaultGridWidthMeters = 5;\r\nconst defaultGridHeightMeters = 5;\r\nconst defaultTreeDiameterMeters = 4;\r\nconst minZoomForGrid = 16.0;\r\n\r\nconst gridColour = \"#fefefe\";\r\nconst gridStrokeOpacity = 0.6;\r\nconst gridStrokeWeight = 0.8;\r\n\r\nconst polygonBoundaryStrokeColour = \"#f00\";\r\nconst polygonBoundaryStrokeOpacity = 0.7;\r\nconst polygonBoundaryStrokeWeight = 3;\r\nconst polygonBoundaryFillColour = \"#111\";\r\nconst polygonBoundaryFillOpacity = 0.16;\r\n\r\nconst polygonTreeGroupStrokeColour = \"#aaa\";\r\nconst polygonTreeGroupStrokeOpacity = 0.6;\r\nconst polygonTreeGroupStrokeWeight = 2;\r\nconst polygonTreeGroupFillColour = \"#111\";\r\nconst polygonTreeGroupFillOpacity = 0.1;\r\n\r\nconst treeCircleStrokeColour = \"#28643c\";\r\nconst treeCircleStrokeOpacity = 0.6;\r\nconst treeCircleStrokeWeight = 2;\r\nconst treeCircleFillColour = \"#459b57\";\r\nconst treeCircleFillOpacity = 0.6;\r\n\r\n\n\n//# sourceURL=webpack://agroforestgrid/./src/settings.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;